'use client'; // If you're using App Router (Next 13+)

import { useEffect, useRef, useState } from "react";
import Image from 'next/image';


const includedItems = [
  "Fast loading, performance-tuned",
  "SEO-friendly structure",
  "Browser compatibility across devices",
  "3 months of post-launch support",
  "Complete design & development",
];



/**
 * Updated StepSection — now:
 *  • each option has its OWN icon (placeholder SVGs)
 *  • navigation buttons sit **below** the bordered card container
 *  • 3‑column option grid on desktop (matches screenshot)
 */

// interface Option {
//   id: string;
//   title: string;
//   subtitle: string;
//   price: string;
//   Icon: React.FC<React.SVGProps<SVGSVGElement>>;
// }

/* --- simple placeholder icons --- */
const Briefcase: React.FC = () => (
 <svg xmlns="http://www.w3.org/2000/svg" width="21" height="20" viewBox="0 0 20 20" fill="none">
  <path d="M17.1976 15.8333H18.7971V17.5H1.20276V15.8333H2.80225V3.33333C2.80225 3.1 2.87956 2.90278 3.03417 2.74167C3.18879 2.58055 3.37806 2.5 3.60199 2.5H11.5994C11.8234 2.5 12.0126 2.58055 12.1673 2.74167C12.3219 2.90278 12.3992 3.1 12.3992 3.33333V15.8333H15.5982V9.16667H13.9987V7.5H16.3979C16.6218 7.5 16.8111 7.58056 16.9657 7.74167C17.1203 7.90278 17.1976 8.1 17.1976 8.33333V15.8333ZM4.40174 4.16667V15.8333H10.7997V4.16667H4.40174ZM6.00122 9.16667H9.2002V10.8333H6.00122V9.16667ZM6.00122 5.83333H9.2002V7.5H6.00122V5.83333Z" fill="#1E1E1E"/>
</svg>
);

const Cart: React.FC = () => (
<svg xmlns="http://www.w3.org/2000/svg" width="21" height="20" viewBox="0 0 21 20" fill="none">
  <path d="M3.45169 12.9105V2.91529H1.78583V1.24943H4.28463C4.51785 1.24943 4.71498 1.32994 4.87601 1.49098C5.03704 1.65201 5.11756 1.84914 5.11756 2.08236V12.0776H15.4793L17.1451 5.41409H6.78343V3.74823H18.2113C18.4445 3.74823 18.6416 3.82874 18.8027 3.98978C18.9637 4.15081 19.0442 4.34794 19.0442 4.58116C19.0442 4.64779 19.0331 4.71443 19.0109 4.78106L16.9286 13.1104C16.8841 13.2992 16.787 13.4519 16.637 13.5685C16.4871 13.6851 16.3177 13.7434 16.1289 13.7434H4.28463C4.05141 13.7434 3.85428 13.6629 3.69325 13.5019C3.53221 13.3408 3.45169 13.1437 3.45169 12.9105ZM5.11756 18.741C4.81771 18.741 4.54006 18.6661 4.28463 18.5161C4.0292 18.3662 3.82651 18.1635 3.67659 17.9081C3.52666 17.6527 3.45169 17.375 3.45169 17.0752C3.45169 16.7753 3.52666 16.4977 3.67659 16.2422C3.82651 15.9868 4.0292 15.7841 4.28463 15.6342C4.54006 15.4843 4.81771 15.4093 5.11756 15.4093C5.41742 15.4093 5.69506 15.4843 5.9505 15.6342C6.20593 15.7841 6.40861 15.9868 6.55854 16.2422C6.70846 16.4977 6.78343 16.7753 6.78343 17.0752C6.78343 17.375 6.70846 17.6527 6.55854 17.9081C6.40861 18.1635 6.20593 18.3662 5.9505 18.5161C5.69506 18.6661 5.41742 18.741 5.11756 18.741ZM15.1128 18.741C14.8129 18.741 14.5353 18.6661 14.2798 18.5161C14.0244 18.3662 13.8217 18.1635 13.6718 17.9081C13.5219 17.6527 13.4469 17.375 13.4469 17.0752C13.4469 16.7753 13.5219 16.4977 13.6718 16.2422C13.8217 15.9868 14.0244 15.7841 14.2798 15.6342C14.5353 15.4843 14.8129 15.4093 15.1128 15.4093C15.4126 15.4093 15.6903 15.4843 15.9457 15.6342C16.2011 15.7841 16.4038 15.9868 16.5537 16.2422C16.7037 16.4977 16.7786 16.7753 16.7786 17.0752C16.7786 17.375 16.7037 17.6527 16.5537 17.9081C16.4038 18.1635 16.2011 18.3662 15.9457 18.5161C15.6903 18.6661 15.4126 18.741 15.1128 18.741Z" fill="#1E1E1E"/>
</svg>
);

const Pen: React.FC = () => (
 <svg xmlns="http://www.w3.org/2000/svg" width="21" height="20" viewBox="0 0 21 20" fill="none">
  <g clipPath="url(#clip0_132_106)">
    <path d="M2.0367 18.7852H18.8033C19.6947 18.7852 20.42 18.06 20.42 17.1685V2.81215C20.42 1.92071 19.6948 1.19543 18.8033 1.19543H2.0367C1.14522 1.19543 0.419983 1.92067 0.419983 2.81215V17.1685C0.419983 18.06 1.14522 18.7852 2.0367 18.7852ZM1.59186 17.1685V7.05481H14.5606V17.6133H2.0367C1.79139 17.6133 1.59186 17.4138 1.59186 17.1685ZM18.8033 17.6133H15.7325V7.05481H19.2481V17.1685C19.2481 17.4138 19.0486 17.6133 18.8033 17.6133ZM2.0367 2.36731H18.8033C19.0486 2.36731 19.2481 2.56684 19.2481 2.81215V5.88293H1.59186V2.81215C1.59186 2.56684 1.79139 2.36731 2.0367 2.36731Z" fill="black"/>
    <path d="M3.34967 4.71106C3.67327 4.71106 3.93561 4.44873 3.93561 4.12512C3.93561 3.80152 3.67327 3.53918 3.34967 3.53918C3.02607 3.53918 2.76373 3.80152 2.76373 4.12512C2.76373 4.44873 3.02607 4.71106 3.34967 4.71106Z" fill="black"/>
    <path d="M5.69342 4.71106C6.01702 4.71106 6.27936 4.44873 6.27936 4.12512C6.27936 3.80152 6.01702 3.53918 5.69342 3.53918C5.36982 3.53918 5.10748 3.80152 5.10748 4.12512C5.10748 4.44873 5.36982 4.71106 5.69342 4.71106Z" fill="black"/>
    <path d="M17.4903 4.71106C17.8139 4.71106 18.0762 4.44873 18.0762 4.12512C18.0762 3.80152 17.8139 3.53918 17.4903 3.53918C17.1667 3.53918 16.9044 3.80152 16.9044 4.12512C16.9044 4.44873 17.1667 4.71106 17.4903 4.71106Z" fill="black"/>
    <path d="M17.4903 10.2125C17.8139 10.2125 18.0762 9.95019 18.0762 9.62659C18.0762 9.30298 17.8139 9.04065 17.4903 9.04065C17.1667 9.04065 16.9044 9.30298 16.9044 9.62659C16.9044 9.95019 17.1667 10.2125 17.4903 10.2125Z" fill="black"/>
    <path d="M17.4903 12.5563C17.8139 12.5563 18.0762 12.2939 18.0762 11.9703C18.0762 11.6467 17.8139 11.3844 17.4903 11.3844C17.1667 11.3844 16.9044 11.6467 16.9044 11.9703C16.9044 12.2939 17.1667 12.5563 17.4903 12.5563Z" fill="black"/>
    <path d="M17.4903 14.9C17.8139 14.9 18.0762 14.6377 18.0762 14.3141C18.0762 13.9905 17.8139 13.7281 17.4903 13.7281C17.1667 13.7281 16.9044 13.9905 16.9044 14.3141C16.9044 14.6377 17.1667 14.9 17.4903 14.9Z" fill="black"/>
    <path d="M10.2318 9.39856H12.8028C13.1264 9.39856 13.3887 9.13622 13.3887 8.81262C13.3887 8.48903 13.1264 8.22668 12.8028 8.22668H10.2318C9.90816 8.22668 9.64581 8.48903 9.64581 8.81262C9.64581 9.13622 9.90812 9.39856 10.2318 9.39856Z" fill="black"/>
    <path d="M12.8028 10.5704H10.2318C9.90816 10.5704 9.64581 10.8328 9.64581 11.1564C9.64581 11.48 9.90816 11.7423 10.2318 11.7423H12.8028C13.1264 11.7423 13.3887 11.48 13.3887 11.1564C13.3887 10.8328 13.1264 10.5704 12.8028 10.5704Z" fill="black"/>
    <path d="M12.8028 12.9142H10.2318C9.90816 12.9142 9.64581 13.1765 9.64581 13.5001C9.64581 13.8237 9.90816 14.0861 10.2318 14.0861H12.8028C13.1264 14.0861 13.3887 13.8237 13.3887 13.5001C13.3887 13.1765 13.1264 12.9142 12.8028 12.9142Z" fill="black"/>
    <path d="M12.8028 15.2579H10.2318C9.90816 15.2579 9.64581 15.5203 9.64581 15.8439C9.64581 16.1675 9.90816 16.4298 10.2318 16.4298H12.8028C13.1264 16.4298 13.3887 16.1675 13.3887 15.8439C13.3887 15.5203 13.1264 15.2579 12.8028 15.2579Z" fill="black"/>
    <path d="M7.88803 15.2579H3.34967C3.02608 15.2579 2.76373 15.5203 2.76373 15.8439C2.76373 16.1675 3.02608 16.4298 3.34967 16.4298H7.88803C8.21162 16.4298 8.47397 16.1675 8.47397 15.8439C8.47397 15.5203 8.21162 15.2579 7.88803 15.2579Z" fill="black"/>
    <path d="M7.88803 8.22668H3.34967C3.02608 8.22668 2.76373 8.48903 2.76373 8.81262V13.5001C2.76373 13.8237 3.02608 14.0861 3.34967 14.0861H7.88803C8.21162 14.0861 8.47397 13.8237 8.47397 13.5001V8.81262C8.47397 8.48903 8.21162 8.22668 7.88803 8.22668ZM7.30209 12.9142H3.93561V9.39856H7.30209V12.9142Z" fill="black"/>
  </g>
  <defs>
    <clipPath id="clip0_132_106">
      <rect width="20" height="20" fill="white" transform="translate(0.419983 -0.00964355)"/>
    </clipPath>
  </defs>
</svg>
);

const Bulb: React.FC = () => (
 <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
  <g clipPath="url(#clip0_132_124)">
    <path d="M1.75781 0H18.2422C19.2114 0 20 0.788555 20 1.75781V18.2422C20 19.2114 19.2114 20 18.2422 20H1.75781C0.788555 20 0 19.2114 0 18.2422V1.75781C0 0.788555 0.788555 0 1.75781 0ZM1.17188 18.2422C1.17188 18.5653 1.43473 18.8281 1.75781 18.8281H18.2422C18.5653 18.8281 18.8281 18.5653 18.8281 18.2422V5.85938H10C9.89379 5.85938 9.78961 5.83051 9.69852 5.77586L7.88461 4.6875H1.17188V18.2422ZM1.17188 3.51562H8.04688C8.15309 3.51562 8.25727 3.54449 8.34836 3.59914L10.1623 4.6875H18.8281V1.75781C18.8281 1.43473 18.5653 1.17188 18.2422 1.17188H1.75781C1.43473 1.17188 1.17188 1.43473 1.17188 1.75781V3.51562Z" fill="black"/>
    <path d="M9.41406 7.61719C9.41406 7.94078 9.15172 8.20312 8.82812 8.20312H2.96875C2.64516 8.20312 2.38281 7.94078 2.38281 7.61719C2.38281 7.29359 2.64516 7.03125 2.96875 7.03125H8.82812C9.15172 7.03125 9.41406 7.29359 9.41406 7.61719Z" fill="black"/>
    <path d="M2.96875 9.375H8.82812C9.15172 9.375 9.41406 9.63734 9.41406 9.96094C9.41406 10.2845 9.15172 10.5469 8.82812 10.5469H2.96875C2.64516 10.5469 2.38281 10.2845 2.38281 9.96094C2.38281 9.63734 2.64516 9.375 2.96875 9.375Z" fill="black"/>
    <path d="M2.96875 11.7188H8.82812C9.15172 11.7188 9.41406 11.9811 9.41406 12.3047C9.41406 12.6283 9.15172 12.8906 8.82812 12.8906H2.96875C2.64516 12.8906 2.38281 12.6283 2.38281 12.3047C2.38281 11.9811 2.64516 11.7188 2.96875 11.7188Z" fill="black"/>
    <path d="M2.96875 14.0625H8.82812C9.15172 14.0625 9.41406 14.3248 9.41406 14.6484C9.41406 14.972 9.15172 15.2344 8.82812 15.2344H2.96875C2.64516 15.2344 2.38281 14.972 2.38281 14.6484C2.38281 14.3248 2.64516 14.0625 2.96875 14.0625Z" fill="black"/>
    <path d="M2.96875 16.4062H8.82812C9.15172 16.4062 9.41406 16.6686 9.41406 16.9922C9.41406 17.3158 9.15172 17.5781 8.82812 17.5781H2.96875C2.64516 17.5781 2.38281 17.3158 2.38281 16.9922C2.38281 16.6686 2.64516 16.4062 2.96875 16.4062Z" fill="black"/>
    <path d="M11.1719 7.03125H17.0312C17.3548 7.03125 17.6172 7.29359 17.6172 7.61719V16.9922C17.6172 17.3158 17.3548 17.5781 17.0312 17.5781H11.1719C10.8483 17.5781 10.5859 17.3158 10.5859 16.9922V7.61719C10.5859 7.29359 10.8483 7.03125 11.1719 7.03125ZM12.2291 8.20312L14.1016 11.1991L15.9741 8.20312H12.2291ZM16.4453 9.66023L14.7925 12.3047L16.4453 14.9491V9.66023ZM15.9741 16.4062L14.1016 13.4102L12.2291 16.4062H15.9741ZM11.7578 14.9491L13.4106 12.3047L11.7578 9.66023V14.9491Z" fill="black"/>
    <path d="M17.0312 3.51562C16.7076 3.51562 16.4453 3.25329 16.4453 2.92969C16.4453 2.60608 16.7076 2.34375 17.0312 2.34375C17.3549 2.34375 17.6172 2.60608 17.6172 2.92969C17.6172 3.25329 17.3549 3.51562 17.0312 3.51562Z" fill="black"/>
    <path d="M14.6875 3.51562C14.3639 3.51562 14.1016 3.25329 14.1016 2.92969C14.1016 2.60608 14.3639 2.34375 14.6875 2.34375C15.0111 2.34375 15.2734 2.60608 15.2734 2.92969C15.2734 3.25329 15.0111 3.51562 14.6875 3.51562Z" fill="black"/>
    <path d="M12.3438 3.51562C12.0201 3.51562 11.7578 3.25329 11.7578 2.92969C11.7578 2.60608 12.0201 2.34375 12.3438 2.34375C12.6674 2.34375 12.9297 2.60608 12.9297 2.92969C12.9297 3.25329 12.6674 3.51562 12.3438 3.51562Z" fill="black"/>
  </g>
  <defs>
    <clipPath id="clip0_132_124">
      <rect width="20" height="20" fill="white" transform="matrix(-1 0 0 1 20 0)"/>
    </clipPath>
  </defs>
</svg>
);

const Puzzle: React.FC = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
  <path d="M13.3334 15L18.3334 10L13.3334 5M6.66669 5L1.66669 10L6.66669 15" stroke="#111827" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
</svg>
);

const WordPressIcon: React.FC = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 43 43" fill="none">
  <g clipPath="url(#clip0_100_350)">
    <path d="M0.000732422 21.4993C0.000732422 30.0088 4.94557 37.3637 12.1173 40.8473L1.86146 12.7498C0.669985 15.4226 0.000732422 18.3819 0.000732422 21.4993Z" fill="#1C769B"/>
    <path d="M21.8773 23.3794L15.4261 42.124C17.3535 42.6906 19.389 42.9999 21.5 42.9999C24.003 42.9999 26.4047 42.5672 28.6392 41.7814C28.5823 41.6885 28.5289 41.5921 28.4859 41.4853L21.8773 23.3794Z" fill="#1C769B"/>
    <path d="M36.0142 20.4153C36.0142 17.757 35.0585 15.9178 34.2415 14.4864C33.1506 12.713 32.1283 11.2136 32.1283 9.44374C32.1283 7.4665 33.627 5.62658 35.7388 5.62658C35.8345 5.62658 35.9247 5.63975 36.0162 5.64461C32.1942 2.13953 27.0968 0 21.5 0C13.9878 0 7.38124 3.85392 3.53772 9.68995C4.04261 9.7059 4.51767 9.7163 4.92061 9.7163C7.16833 9.7163 10.6512 9.44305 10.6512 9.44305C11.8094 9.3737 11.9453 11.0777 10.7871 11.2136C10.7871 11.2136 9.62272 11.3509 8.32652 11.4196L16.1557 34.7061L20.8613 20.5956L17.5137 11.4196C16.3541 11.3509 15.2569 11.2136 15.2569 11.2136C14.0987 11.145 14.234 9.37439 15.3942 9.44305C15.3942 9.44305 18.9444 9.7163 21.0569 9.7163C23.3053 9.7163 26.7868 9.44305 26.7868 9.44305C27.9464 9.3737 28.0823 11.0777 26.9234 11.2136C26.9234 11.2136 25.7576 11.3509 24.4635 11.4196L32.233 34.5293L34.3795 27.3645C35.3054 24.3892 36.0142 22.2546 36.0142 20.4153Z" fill="#1C769B"/>
    <path d="M40.5117 13.3954C40.5117 15.5765 40.1039 18.0289 38.8756 21.0963L32.3093 40.0816C38.7009 36.356 42.9993 29.4304 42.9993 21.5C42.9993 17.7612 42.0443 14.2471 40.366 11.1844C40.4596 11.8697 40.5117 12.6034 40.5117 13.3954Z" fill="#1C769B"/>
    <path d="M32.129 9.44305C32.129 7.46581 33.6277 5.62588 35.7395 5.62588C35.8352 5.62588 35.9253 5.63906 36.0169 5.64391C32.1942 2.13953 27.0967 0 21.5 0C13.9877 0 7.38118 3.85392 3.53766 9.68995C4.04255 9.7059 4.51761 9.7163 4.92055 9.7163C7.16827 9.7163 10.6512 9.44305 10.6512 9.44305C11.8093 9.3737 11.9453 11.0777 10.7871 11.2136C10.7871 11.2136 9.62266 11.3509 8.32646 11.4196L11.3121 20.2995C13.3434 21.0166 15.544 21.4112 17.8423 21.4112C18.7987 21.4112 19.7384 21.3426 20.6573 21.2115L20.8619 20.5963L17.5143 11.4203C16.3547 11.3516 15.2576 11.2143 15.2576 11.2143C14.0994 11.1457 14.2346 9.37508 15.3949 9.44374C15.3949 9.44374 18.945 9.71699 21.0575 9.71699C23.3059 9.71699 26.7874 9.44374 26.7874 9.44374C27.947 9.37439 28.0829 11.0784 26.924 11.2143C26.924 11.2143 25.7582 11.3516 24.4641 11.4203L27.051 19.1157C29.6767 17.7036 31.9015 15.7098 33.5236 13.3178C32.742 12.0202 32.129 10.8121 32.129 9.44305Z" fill="#2795B7"/>
    <path d="M21.5 0C14.7541 0 8.74535 3.11393 4.80334 7.97416C8.26335 8.69335 12.0632 9.09213 16.051 9.09213C23.6021 9.09213 30.4818 7.66554 35.6549 5.32559C31.8737 2.01261 26.9227 0 21.5 0Z" fill="#3FB5D1"/>
  </g>
  <defs>
    <clipPath id="clip0_100_350">
      <rect width="43" height="43" fill="white"/>
    </clipPath>
  </defs>
</svg>
);
const FramerIcon: React.FC = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 31 32" fill="none">
  <path d="M15.5 20.6667V30L6.45837 20.6667M6.45837 20.6667V11.3333H15.5M6.45837 20.6667H24.5417L15.5 11.3333M15.5 11.3333H24.5417V2H6.45837L15.5 11.3333Z" stroke="#6E60B8" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
</svg>
);

const Form1: React.FC<React.SVGProps<SVGSVGElement>> = () => (
        <svg xmlns="http://www.w3.org/2000/svg"  width="18" height="18" viewBox="0 0 21 20" fill="none">
  <path d="M10.5124 0.259161C7.13539 0.254738 4.38363 3.00278 4.38367 6.37983C4.38371 8.6248 5.59257 10.5872 7.39471 11.6522C7.71473 11.8414 7.90842 12.188 7.90842 12.5597V14.0505C7.96767 14.0257 8.03264 14.012 8.10086 14.012H12.9077C12.9759 14.012 13.0409 14.0258 13.1002 14.0505V12.5596C13.1002 12.1835 13.3011 11.8379 13.6245 11.6459C15.4208 10.5794 16.6249 8.62034 16.6249 6.37971C16.6249 3.00215 13.889 0.263583 10.5124 0.259161Z" fill="#FFE07D"/>
  <path d="M9.52607 12.5597C9.52607 12.188 9.33238 11.8414 9.01239 11.6523C7.21026 10.5872 6.00135 8.62484 6.00135 6.37987C6.00131 3.2792 8.32112 0.709196 11.3147 0.312583C11.0521 0.277868 10.7844 0.259513 10.5124 0.259161C7.13539 0.254738 4.38363 3.00278 4.38367 6.37983C4.38371 8.6248 5.59257 10.5872 7.39471 11.6522C7.71473 11.8414 7.90842 12.188 7.90842 12.5597V14.0505C7.96763 14.0257 8.03264 14.012 8.10086 14.012H9.52607V12.5597Z" fill="#FFC250"/>
  <path d="M14.7741 5.18139C14.4565 3.99769 13.6404 3.00799 12.5352 2.46607C12.3897 2.39468 12.3295 2.21884 12.4009 2.07329C12.4722 1.92774 12.6482 1.86762 12.7937 1.93897C14.0511 2.55549 14.9796 3.68189 15.3411 5.02922C15.3832 5.18577 15.2903 5.34678 15.1337 5.38881C14.9772 5.43081 14.8162 5.33805 14.7741 5.18139Z" fill="#FFEAC8"/>
  <path d="M9.31909 18.3099V18.525C9.31909 19.1769 9.85249 19.7103 10.5044 19.7103C11.1563 19.7103 11.6897 19.1769 11.6897 18.525V18.3099H9.31909Z" fill="#8479C2"/>
  <path d="M10.3801 18.525V18.3099H9.31897V18.525C9.31897 19.1769 9.85237 19.7103 10.5043 19.7103C10.6947 19.7103 10.8749 19.6645 11.0348 19.5838C10.6475 19.3883 10.3801 18.9865 10.3801 18.525Z" fill="#6E60B8"/>
  <path d="M2.96 6.51662H1.95027C1.78816 6.51662 1.65674 6.3852 1.65674 6.22309C1.65674 6.06099 1.78816 5.92957 1.95027 5.92957H2.96C3.1221 5.92957 3.25353 6.06099 3.25353 6.22309C3.25353 6.3852 3.1221 6.51662 2.96 6.51662Z" fill="#FFC250"/>
  <path d="M3.24815 4.6539L2.30409 4.2956C2.15251 4.23807 2.07628 4.06857 2.13381 3.91703C2.19134 3.76549 2.3608 3.68929 2.51238 3.74675L3.45644 4.10505C3.60802 4.16258 3.68426 4.33208 3.62673 4.48362C3.56923 4.63508 3.39985 4.71139 3.24815 4.6539Z" fill="#FFC250"/>
  <path d="M2.1338 8.52911C2.07627 8.37753 2.15255 8.20803 2.30409 8.15054L3.24815 7.79224C3.39965 7.73475 3.56919 7.81095 3.62672 7.96252C3.68425 8.1141 3.60797 8.2836 3.45644 8.3411L2.51237 8.69939C2.36076 8.75689 2.19133 8.68065 2.1338 8.52911Z" fill="#FFC250"/>
  <path d="M19.0584 6.51662H18.0487C17.8865 6.51662 17.7551 6.3852 17.7551 6.22309C17.7551 6.06099 17.8865 5.92957 18.0487 5.92957H19.0584C19.2205 5.92957 19.352 6.06099 19.352 6.22309C19.352 6.3852 19.2205 6.51662 19.0584 6.51662Z" fill="#FFC250"/>
  <path d="M17.382 4.48362C17.3244 4.33204 17.4007 4.16254 17.5523 4.10505L18.4963 3.74675C18.6478 3.6893 18.8174 3.76546 18.8749 3.91704C18.9324 4.06861 18.8561 4.23812 18.7046 4.29561L17.7605 4.65391C17.609 4.7114 17.4395 4.63516 17.382 4.48362Z" fill="#FFC250"/>
  <path d="M18.4963 8.69939L17.5523 8.34109C17.4007 8.28356 17.3244 8.11406 17.382 7.96252C17.4395 7.81098 17.609 7.73474 17.7605 7.79223L18.7046 8.15053C18.8562 8.20806 18.9324 8.37757 18.8749 8.5291C18.8174 8.68056 18.648 8.75688 18.4963 8.69939Z" fill="#FFC250"/>
  <path d="M12.5166 16.8675H8.49199C8.21115 16.8675 7.98267 17.096 7.98267 17.3768V17.8104C7.98267 18.0912 8.21115 18.3197 8.49199 18.3197H12.5166C12.7974 18.3197 13.0259 18.0912 13.0259 17.8104V17.3768C13.0259 17.096 12.7975 16.8675 12.5166 16.8675Z" fill="#EFECEF"/>
  <path d="M12.5166 17.5936H8.49199C8.26199 17.5936 8.06732 17.4403 8.00431 17.2306C7.99038 17.277 7.98267 17.326 7.98267 17.3768V17.8104C7.98267 18.0913 8.21115 18.3197 8.49199 18.3197H12.5166C12.7974 18.3197 13.0259 18.0913 13.0259 17.8104V17.3768C13.0259 17.326 13.0182 17.277 13.0043 17.2306C12.9412 17.4403 12.7466 17.5936 12.5166 17.5936Z" fill="#E2DFE2"/>
  <path d="M12.9078 15.4349H8.10088C7.82003 15.4349 7.59155 15.6634 7.59155 15.9442V16.3778C7.59155 16.6586 7.82003 16.8871 8.10088 16.8871H12.9078C13.1886 16.8871 13.4171 16.6586 13.4171 16.3778V15.9442C13.4171 15.6634 13.1886 15.4349 12.9078 15.4349Z" fill="#EFECEF"/>
  <path d="M12.9078 16.161H8.10088C7.87091 16.161 7.67625 16.0077 7.6132 15.7979C7.59926 15.8443 7.59155 15.8933 7.59155 15.9442V16.3777C7.59155 16.6586 7.82003 16.8871 8.10088 16.8871H12.9078C13.1886 16.8871 13.4171 16.6586 13.4171 16.3777V15.9442C13.4171 15.8933 13.4094 15.8443 13.3954 15.7979C13.3324 16.0077 13.1378 16.161 12.9078 16.161Z" fill="#E2DFE2"/>
  <path d="M12.9078 14.0022H8.10088C7.82003 14.0022 7.59155 14.2307 7.59155 14.5115V14.9451C7.59155 15.2259 7.82003 15.4544 8.10088 15.4544H12.9078C13.1886 15.4544 13.4171 15.2259 13.4171 14.9451V14.5115C13.4171 14.2307 13.1886 14.0022 12.9078 14.0022Z" fill="#EFECEF"/>
  <path d="M12.9078 14.7283H8.10088C7.87091 14.7283 7.67625 14.575 7.6132 14.3653C7.59926 14.4117 7.59155 14.4607 7.59155 14.5116V14.9451C7.59155 15.226 7.82003 15.4544 8.10088 15.4544H12.9078C13.1886 15.4544 13.4171 15.226 13.4171 14.9451V14.5116C13.4171 14.4607 13.4094 14.4117 13.3954 14.3653C13.3324 14.575 13.1378 14.7283 12.9078 14.7283Z" fill="#E2DFE2"/>
  <path d="M12.7846 1.93508C12.639 1.86369 12.4632 1.92385 12.3918 2.0694C12.3205 2.21495 12.3806 2.39079 12.5262 2.46218C13.6314 3.00414 14.4475 3.99384 14.7651 5.1775C14.8072 5.3342 14.9683 5.42696 15.1247 5.38492C15.2813 5.34293 15.3742 5.18192 15.3322 5.02533C14.9706 3.67797 14.042 2.5516 12.7846 1.93508Z" fill="black"/>
  <path d="M3.24461 6.21925C3.24461 6.05714 3.11323 5.92572 2.95109 5.92572H1.94135C1.77921 5.92572 1.64783 6.05714 1.64783 6.21925C1.64783 6.38135 1.77921 6.51277 1.94135 6.51277H2.95109C3.11323 6.51277 3.24461 6.38135 3.24461 6.21925Z" fill="black"/>
  <path d="M3.44753 4.10114L2.50347 3.74285C2.35201 3.68539 2.18243 3.76155 2.1249 3.91313C2.06736 4.06471 2.1436 4.23421 2.29518 4.2917L3.23924 4.65C3.39102 4.70753 3.56036 4.63114 3.61781 4.47972C3.67531 4.32818 3.59911 4.15868 3.44753 4.10114Z" fill="black"/>
  <path d="M3.23935 7.78832L2.29529 8.14662C2.14371 8.20415 2.06751 8.37365 2.125 8.52519C2.18246 8.67669 2.35184 8.753 2.50357 8.69547L3.44764 8.33717C3.59921 8.27964 3.67541 8.11014 3.61792 7.9586C3.56043 7.80702 3.39089 7.73086 3.23935 7.78832Z" fill="black"/>
  <path d="M19.0495 5.92572H18.0397C17.8776 5.92572 17.7462 6.05714 17.7462 6.21925C17.7462 6.38135 17.8776 6.51277 18.0397 6.51277H19.0495C19.2117 6.51277 19.343 6.38135 19.343 6.21925C19.343 6.05714 19.2117 5.92572 19.0495 5.92572Z" fill="black"/>
  <path d="M17.7516 4.65007L18.6957 4.29177C18.8473 4.23424 18.9235 4.06473 18.866 3.9132C18.8085 3.76158 18.6389 3.68546 18.4874 3.74291L17.5433 4.10121C17.3918 4.15874 17.3156 4.32824 17.373 4.47978C17.4305 4.63124 17.5999 4.70756 17.7516 4.65007Z" fill="black"/>
  <path d="M18.6957 8.14662L17.7516 7.78832C17.6001 7.73086 17.4306 7.80702 17.3731 7.9586C17.3155 8.11018 17.3918 8.27968 17.5433 8.33717L18.4874 8.69547C18.6392 8.753 18.8085 8.67661 18.866 8.52519C18.9235 8.37365 18.8473 8.20415 18.6957 8.14662Z" fill="black"/>
  <path d="M11.1479 0.585266C13.7988 0.880476 15.904 2.93207 16.2675 5.57433C16.2895 5.73436 16.4369 5.84719 16.5983 5.82512C16.7589 5.80304 16.8711 5.65491 16.849 5.49433C16.6565 4.09425 15.9908 2.77705 14.9747 1.7854C13.9568 0.792027 12.6209 0.158634 11.2129 0.00181237C11.0517 -0.0160341 10.9066 0.0999287 10.8887 0.261056C10.8707 0.422182 10.9868 0.567302 11.1479 0.585266Z" fill="black"/>
  <path d="M16.6178 6.61167C16.457 6.59809 16.3142 6.71757 16.3004 6.87909C16.1408 8.7444 15.0813 10.4306 13.4659 11.3897C13.0539 11.6343 12.7979 12.0811 12.7979 12.5558V13.7146H11.5557V11.3812C11.5557 11.2464 11.6011 11.1134 11.6835 11.0067L12.1036 10.4629C12.2649 10.254 12.3538 9.99353 12.3538 9.72955V7.60719C12.5159 7.60711 12.6472 7.47573 12.6472 7.31367C12.6472 7.1516 12.5159 7.02022 12.3538 7.02014V6.98813C12.3538 6.82602 12.2224 6.6946 12.0603 6.6946C11.8981 6.6946 11.7667 6.82602 11.7667 6.98813V7.0201H9.22441V6.98813C9.22441 6.82602 9.09302 6.6946 8.93088 6.6946C8.76874 6.6946 8.63735 6.82602 8.63735 6.98813V7.0201C8.47529 7.02018 8.34394 7.15156 8.34394 7.31363C8.34394 7.47569 8.47529 7.60708 8.63735 7.60715V9.72951C8.63735 9.99349 8.72623 10.2539 8.88759 10.4629L9.30765 11.0067C9.39004 11.1134 9.43547 11.2464 9.43547 11.3812V13.7146H8.19327V12.5558C8.19327 12.08 7.94119 11.6354 7.53537 11.3956C5.76701 10.3505 4.66851 8.42707 4.66848 6.37587C4.66844 3.40518 6.89318 0.91587 9.8434 0.585515C10.0045 0.567473 10.1204 0.422236 10.1024 0.261148C10.0844 0.10006 9.93964 -0.0159807 9.77804 0.00210056C8.2225 0.176299 6.78488 0.917083 5.73003 2.08802C4.66691 3.26816 4.08138 4.79094 4.08142 6.37587C4.0815 8.71516 5.33819 10.779 7.23664 11.901C7.46458 12.0357 7.60617 12.2866 7.60617 12.5557V13.8822C7.41969 14.0275 7.29903 14.2535 7.29903 14.5076V14.9411C7.29903 15.1304 7.36587 15.3042 7.4769 15.4407C7.36587 15.5772 7.29903 15.751 7.29903 15.9402V16.3738C7.29903 16.6865 7.48133 16.9566 7.74484 17.0857C7.71004 17.1749 7.6902 17.2715 7.6902 17.3729V17.8064C7.6902 18.2437 8.04595 18.5995 8.48327 18.5995H9.01882C9.05976 19.3786 9.70646 19.9999 10.4956 19.9999C11.2847 19.9999 11.9314 19.3786 11.9723 18.5995H12.5078C12.9452 18.5995 13.3009 18.2438 13.3009 17.8064V17.3729C13.3009 17.2715 13.2811 17.1749 13.2463 17.0857C13.5097 16.9566 13.6921 16.6865 13.6921 16.3738V15.9402C13.6921 15.751 13.6252 15.5772 13.5142 15.4407C13.6252 15.3042 13.6921 15.1304 13.6921 14.9411V14.5076C13.6921 14.2534 13.5714 14.0274 13.3849 13.8822V12.5557C13.3849 12.2872 13.5308 12.0338 13.7657 11.8944C15.5435 10.8388 16.7097 8.98262 16.8853 6.92903C16.899 6.76759 16.7793 6.62548 16.6178 6.61167ZM9.35211 10.1041C9.26973 9.99744 9.22433 9.86446 9.22433 9.72963V7.60727H11.7667V9.72963C11.7667 9.86446 11.7213 9.99744 11.6389 10.1041L11.2188 10.6479C11.0574 10.8569 10.9685 11.1173 10.9685 11.3813V13.7147H10.0224V11.3813C10.0224 11.1173 9.93353 10.8569 9.77213 10.6479L9.35211 10.1041ZM10.4955 19.4129C10.0302 19.4129 9.64701 19.0548 9.60717 18.5996H11.3839C11.344 19.0547 10.9608 19.4129 10.4955 19.4129ZM12.7138 17.8066C12.7138 17.9201 12.6214 18.0126 12.5078 18.0126C12.0182 18.0126 8.84462 18.0126 8.48323 18.0126C8.36966 18.0126 8.27722 17.9202 8.27722 17.8066V17.373C8.27722 17.2594 8.36962 17.167 8.48323 17.167H12.5078C12.6214 17.167 12.7138 17.2594 12.7138 17.373V17.8066ZM13.105 16.3739C13.105 16.4875 13.0126 16.5799 12.8989 16.5799C12.6744 16.5799 8.23373 16.5799 8.0921 16.5799C7.97848 16.5799 7.88604 16.4875 7.88604 16.3739V15.9404C7.88604 15.8268 7.97844 15.7343 8.0921 15.7343H12.8989C13.0126 15.7343 13.105 15.8267 13.105 15.9404V16.3739ZM13.105 14.9413C13.105 15.0548 13.0126 15.1473 12.8989 15.1473H8.0921C7.97848 15.1473 7.88604 15.0549 7.88604 14.9413V14.5077C7.88604 14.3908 7.98412 14.3017 8.0921 14.3017H12.8989C13.0117 14.3017 13.105 14.3949 13.105 14.5077V14.9413Z" fill="black"/>
            </svg>
);
const Form2: React.FC<React.SVGProps<SVGSVGElement>> = () => (
       <svg xmlns="http://www.w3.org/2000/svg" width="20" height="21" viewBox="0 0 20 21" fill="none">
  <g clipPath="url(#clip0_100_331)">
    <path d="M17.2972 12.2415H18.8288C19.2602 12.2415 19.6098 11.8917 19.6096 11.4603L19.6085 9.52872C19.6083 9.09766 19.2588 8.74832 18.8277 8.74832H17.2947C17.1083 7.96894 16.8003 7.23691 16.3917 6.57327L17.4744 5.49061C17.7794 5.18557 17.7793 4.69104 17.4742 4.38616L16.1078 3.0208C15.8029 2.71603 15.3086 2.71615 15.0038 3.02099L13.9205 4.10436C13.2571 3.69682 12.5254 3.38975 11.7466 3.204V1.67169C11.7466 1.24044 11.3971 0.890869 10.9658 0.890869H9.03428C8.60303 0.890869 8.25346 1.24044 8.25346 1.67169V3.204C7.47467 3.38975 6.74298 3.69682 6.07958 4.10436L4.99622 3.02107C4.69137 2.71623 4.19711 2.71611 3.89219 3.02088L2.52586 4.38616C2.22074 4.69108 2.22062 5.18561 2.52566 5.49061L3.60832 6.57327C3.19977 7.23691 2.89176 7.96894 2.70531 8.74832H1.17226C0.741203 8.74832 0.39167 9.09766 0.391436 9.52872L0.390381 11.4602C0.390147 11.8917 0.739796 12.2415 1.1712 12.2415H2.70281C2.88844 13.0222 3.19598 13.7556 3.60438 14.4204L2.52105 15.5037C2.21621 15.8086 2.21609 16.3028 2.52086 16.6078L3.88618 17.9741C4.1911 18.2792 4.68563 18.2793 4.99059 17.9743L6.07325 16.8916C6.73834 17.3011 7.47209 17.6095 8.25334 17.7959V19.3282C8.25334 19.7594 8.60291 20.109 9.03416 20.109H10.9657C11.3969 20.109 11.7465 19.7594 11.7465 19.3282V17.7959C12.5278 17.6095 13.2616 17.3011 13.9266 16.8916L15.0093 17.9743C15.3143 18.2793 15.8088 18.2792 16.1137 17.9741L17.479 16.6078C17.7838 16.3028 17.7837 15.8085 17.4788 15.5037L16.3955 14.4204C16.804 13.7556 17.1115 13.0222 17.2972 12.2415Z" fill="#FFC66C"/>
    <path d="M10 15.341C12.6737 15.341 14.8412 13.1736 14.8412 10.4999C14.8412 7.82625 12.6737 5.65881 10 5.65881C7.32638 5.65881 5.15894 7.82625 5.15894 10.4999C5.15894 13.1736 7.32638 15.341 10 15.341Z" fill="#B3B6C3"/>
    <path d="M10 13.6233C11.7249 13.6233 13.1233 12.2249 13.1233 10.5C13.1233 8.77505 11.7249 7.37671 10 7.37671C8.27505 7.37671 6.87671 8.77505 6.87671 10.5C6.87671 12.2249 8.27505 13.6233 10 13.6233Z" fill="white"/>
    <path d="M10.0001 15.7316C8.60267 15.7316 7.28892 15.1874 6.30083 14.1993C5.31274 13.2112 4.76855 11.8974 4.76855 10.5001C4.76855 9.10267 5.3127 7.78892 6.30083 6.80083C7.86517 5.23648 10.2571 4.82508 12.2529 5.77699C12.4475 5.86985 12.53 6.10282 12.4372 6.29747C12.3444 6.49204 12.1114 6.5745 11.9167 6.48176C10.2188 5.67184 8.18384 6.022 6.8529 7.35294C6.01227 8.19353 5.5493 9.31119 5.5493 10.5001C5.5493 11.6889 6.01227 12.8066 6.8529 13.6472C7.69353 14.4878 8.81119 14.9508 10 14.9508C11.1889 14.9508 12.3066 14.4878 13.1471 13.6472C14.5288 12.2655 14.8508 10.1743 13.9485 8.44329C13.8488 8.25212 13.923 8.0163 14.1142 7.91661C14.3054 7.81689 14.5412 7.89114 14.6409 8.08236C15.1516 9.06205 15.3368 10.1605 15.1765 11.2591C15.013 12.3797 14.5022 13.3964 13.6993 14.1993C12.7112 15.1874 11.3975 15.7316 10.0001 15.7316Z" fill="black"/>
    <path d="M13.4393 7.48337C13.3387 7.48337 13.2382 7.44473 13.1618 7.36755L13.1472 7.3529C12.9947 7.20044 12.9947 6.95325 13.1472 6.80075C13.2996 6.64829 13.5468 6.64829 13.6993 6.80075L13.7169 6.8184C13.8685 6.97169 13.8672 7.21884 13.7139 7.37052C13.6378 7.44579 13.5386 7.48337 13.4393 7.48337Z" fill="black"/>
    <path d="M10.0076 14.0164C9.63114 14.0164 9.25051 13.9556 8.87891 13.8308C8.67453 13.7622 8.56445 13.5408 8.63309 13.3365C8.70172 13.1321 8.92309 13.0219 9.12746 13.0906C10.1188 13.4235 11.1935 13.1714 11.9324 12.4325C12.4486 11.9163 12.7329 11.2301 12.7329 10.5001C12.7329 9.77005 12.4486 9.0838 11.9325 8.56762C11.4163 8.05141 10.73 7.76715 10 7.76715C9.27 7.76715 8.58375 8.05141 8.06758 8.56758C7.33558 9.29954 7.0807 10.366 7.40222 11.3508C7.46914 11.5558 7.35726 11.7762 7.1523 11.8431C6.94734 11.9101 6.72691 11.7982 6.65999 11.5932C6.24671 10.3274 6.57448 8.95645 7.5155 8.01547C8.17918 7.3518 9.06149 6.98633 10 6.98633C10.9386 6.98633 11.821 7.35184 12.4846 8.01551C13.1483 8.67919 13.5138 9.56149 13.5138 10.5001C13.5138 11.4386 13.1483 12.321 12.4846 12.9846C11.8117 13.6575 10.9222 14.0164 10.0076 14.0164Z" fill="black"/>
    <path d="M7.8036 13.1109C7.7043 13.1109 7.605 13.0733 7.52887 12.9979L7.51547 12.9845C7.36301 12.832 7.36301 12.5848 7.51547 12.4323C7.66793 12.2799 7.91512 12.2799 8.06762 12.4323L8.0784 12.4431C8.2316 12.5948 8.23278 12.842 8.08102 12.9952C8.00469 13.0723 7.90418 13.1109 7.8036 13.1109Z" fill="black"/>
    <path d="M10.9658 20.4996H9.03425C8.38843 20.4996 7.863 19.9741 7.863 19.3283V18.0979C7.26061 17.9289 6.68182 17.6888 6.13569 17.3815L5.26674 18.2504C5.04549 18.4717 4.75135 18.5935 4.43853 18.5935C4.43846 18.5935 4.43842 18.5935 4.43834 18.5935C4.12541 18.5935 3.83127 18.4715 3.61009 18.2502L2.24477 16.8838C1.78844 16.4272 1.78856 15.6843 2.24509 15.2277L3.1149 14.3579C2.80841 13.8122 2.56911 13.2338 2.40067 12.6319H1.17125C0.858285 12.6319 0.564104 12.51 0.342853 12.2887C0.121602 12.0673 -0.0001561 11.773 1.50199e-07 11.4601L0.00105484 9.52849C0.00140641 8.88302 0.526838 8.3579 1.17231 8.3579H2.40356C2.57255 7.75731 2.81212 7.18016 3.11861 6.63563L2.24962 5.76668C2.02837 5.54539 1.90653 5.25117 1.90657 4.93828C1.90661 4.62531 2.02856 4.33121 2.24989 4.10999L3.61623 2.74468C4.07287 2.28827 4.81576 2.28846 5.27229 2.74499L6.14213 3.6148C6.68628 3.30921 7.26296 3.07038 7.86304 2.90198V1.67174C7.86304 1.02592 8.38847 0.500488 9.03429 0.500488H10.9659C11.6117 0.500488 12.1371 1.02592 12.1371 1.67174V2.9021C12.7372 3.0705 13.3138 3.30933 13.858 3.61491L14.7279 2.74507C15.1844 2.28854 15.9273 2.28843 16.3839 2.74479L17.7503 4.11007C17.9716 4.33128 18.0935 4.62543 18.0936 4.93836C18.0936 5.25129 17.9718 5.54547 17.7505 5.76676L16.8815 6.63571C17.188 7.1802 17.4276 7.75739 17.5966 8.35798H18.8278C19.4733 8.35798 19.9988 8.88314 19.9991 9.52857L20.0002 11.4601C20.0004 11.7731 19.8786 12.0674 19.6573 12.2887C19.4361 12.5101 19.1419 12.632 18.8289 12.632H17.5995C17.431 13.2339 17.1917 13.8122 16.8853 14.358L17.7551 15.2278C18.2116 15.6843 18.2118 16.4272 17.7554 16.8839L16.3901 18.2502C16.1689 18.4716 15.8747 18.5935 15.5618 18.5935C15.5618 18.5935 15.5617 18.5935 15.5616 18.5935C15.2487 18.5935 14.9547 18.4717 14.7334 18.2505L13.8645 17.3815C13.3184 17.6889 12.7395 17.929 12.1372 18.098V19.3283C12.137 19.9741 11.6116 20.4996 10.9658 20.4996ZM6.0735 16.5013C6.14393 16.5013 6.21475 16.5203 6.27803 16.5592C6.91878 16.9537 7.61386 17.242 8.34402 17.4162C8.5198 17.4581 8.64386 17.6152 8.64386 17.7959V19.3283C8.64386 19.5435 8.81902 19.7187 9.03429 19.7187H10.9659C11.1811 19.7187 11.3563 19.5435 11.3563 19.3283V17.7959C11.3563 17.6152 11.4803 17.4581 11.6561 17.4162C12.3863 17.242 13.0814 16.9537 13.7221 16.5592C13.8761 16.4644 14.075 16.4878 14.2029 16.6156L15.2855 17.6983C15.3593 17.772 15.4574 17.8126 15.5617 17.8126C15.666 17.8126 15.764 17.7719 15.8378 17.6982L17.2031 16.3318C17.3552 16.1796 17.3551 15.932 17.203 15.7798L16.1196 14.6965C15.9919 14.5687 15.9685 14.37 16.0631 14.2161C16.4565 13.5756 16.744 12.8809 16.9175 12.1512C16.9593 11.9753 17.1165 11.8511 17.2973 11.8511H18.8289C18.9333 11.8511 19.0313 11.8105 19.1051 11.7367C19.1788 11.6629 19.2194 11.5648 19.2193 11.4605L19.2183 9.52892C19.2182 9.31377 19.043 9.13873 18.8278 9.13873H17.2948C17.1142 9.13873 16.9572 9.01482 16.9151 8.83916C16.7408 8.11064 16.4529 7.41716 16.0593 6.77794C15.9645 6.62395 15.9879 6.42504 16.1157 6.29719L17.1983 5.21453C17.2721 5.14078 17.3127 5.04269 17.3127 4.9384C17.3127 4.83406 17.272 4.73605 17.1983 4.6623L15.8319 3.29698C15.6797 3.14487 15.4321 3.14487 15.2799 3.2971L14.1966 4.3805C14.0689 4.50828 13.8702 4.53172 13.7162 4.43707C13.0772 4.04456 12.3841 3.75749 11.6561 3.58382C11.4803 3.54191 11.3562 3.3848 11.3562 3.20405V1.67174C11.3562 1.45647 11.1811 1.28131 10.9658 1.28131H9.03421C8.81894 1.28131 8.64378 1.45647 8.64378 1.67174V3.20405C8.64378 3.38476 8.51976 3.54187 8.34394 3.58382C7.61593 3.75749 6.9228 4.04456 6.28381 4.43707C6.12983 4.53164 5.93112 4.5082 5.80342 4.3805L4.7201 3.29718C4.56787 3.14495 4.32029 3.14495 4.1681 3.29706L2.80173 4.66238C2.72794 4.73613 2.68732 4.83418 2.68732 4.93847C2.68732 5.04277 2.7279 5.14086 2.80165 5.21461L3.88431 6.29727C4.01213 6.42512 4.03552 6.62403 3.94068 6.77801C3.54712 7.41727 3.25919 8.11075 3.0849 8.83923C3.04286 9.0149 2.88583 9.1388 2.70517 9.1388H1.17231C0.957152 9.1388 0.781995 9.31384 0.781878 9.52904L0.780824 11.4605C0.780784 11.5649 0.821331 11.663 0.895082 11.7367C0.968832 11.8105 1.06692 11.8512 1.17122 11.8512H2.70282C2.88364 11.8512 3.04079 11.9753 3.08267 12.1513C3.25618 12.881 3.54369 13.5757 3.93709 14.2162C4.03166 14.3701 4.00826 14.5688 3.88052 14.6966L2.7972 15.7799C2.64501 15.9321 2.64497 16.1797 2.79708 16.3319L4.1624 17.6983C4.23615 17.772 4.3342 17.8127 4.43849 17.8127H4.43857C4.54287 17.8127 4.64088 17.7721 4.71463 17.6983L5.79729 16.6157C5.87256 16.5403 5.97256 16.5013 6.0735 16.5013Z" fill="black"/>
  </g>
  <defs>
    <clipPath id="clip0_100_331">
      <rect width="20" height="20" fill="white" transform="translate(0 0.5)"/>
    </clipPath>
  </defs>
</svg>
);
const Form3: React.FC<React.SVGProps<SVGSVGElement>> = () => (
       <svg xmlns="http://www.w3.org/2000/svg" width="20" height="21" viewBox="0 0 20 21" fill="none">
  <g clipPath="url(#clip0_100_384)">
    <path d="M12.1124 3.99034C11.2752 1.93296 9.2502 0.485539 6.88868 0.500109C3.87603 0.518664 1.39899 2.9487 1.32591 5.9605C1.28985 7.44644 1.83286 8.80507 2.74521 9.82702C3.47251 10.6417 3.83751 11.7147 3.80071 12.8062C3.79583 12.9513 3.79509 13.0975 3.79868 13.2445C3.89493 17.2055 7.27864 20.5024 11.2408 20.5C15.3475 20.4975 18.6759 17.1676 18.6759 13.0603C18.6759 10.0496 16.8875 7.45683 14.3151 6.28593C13.3125 5.82956 12.5275 5.01066 12.1124 3.99034Z" fill="url(#paint0_linear_100_384)"/>
    <path opacity="0.1" d="M17.7731 3.49712H15.4726V2.91079C15.4726 2.58712 15.2099 2.32446 14.8863 2.32446H5.11383C4.79016 2.32446 4.5275 2.58716 4.5275 2.91079V3.49712H2.22695C1.90328 3.49712 1.64062 3.75981 1.64062 4.08345V16.3674C1.64062 16.6911 1.90332 16.9538 2.22695 16.9538H4.52742V17.5401C4.52742 17.8638 4.79012 18.1264 5.11375 18.1264H14.8862C15.2099 18.1264 15.4725 17.8637 15.4725 17.5401V16.9538H17.773C18.0967 16.9538 18.3593 16.6911 18.3593 16.3674V4.08345C18.3594 3.75978 18.0967 3.49712 17.7731 3.49712Z" fill="#2626BC"/>
    <path d="M17.7731 4.31738H14.0654V17.7741H17.7731C18.0968 17.7741 18.3595 17.5114 18.3595 17.1877V4.90375C18.3595 4.58004 18.0968 4.31738 17.7731 4.31738Z" fill="white"/>
    <path d="M16.8799 13.2347H14.0654V17.774H16.8799C16.9446 17.774 16.9971 17.7215 16.9971 17.6568V13.352C16.9971 13.2872 16.9446 13.2347 16.8799 13.2347Z" fill="#FFA8CF"/>
    <path d="M16.8799 7.67004H14.0654V12.2093H16.8799C16.9446 12.2093 16.9971 12.1568 16.9971 12.0921V7.78731C16.9971 7.72254 16.9446 7.67004 16.8799 7.67004Z" fill="#97FFD2"/>
    <path d="M17.7731 4.31738H14.0654V6.20039H18.3595V4.90371C18.3595 4.57988 18.0969 4.31738 17.7731 4.31738Z" fill="#02FFB3"/>
    <path d="M5.81742 4.31738H2.22695C1.90328 4.31738 1.64062 4.58008 1.64062 4.90371V17.1877C1.64062 17.5114 1.90332 17.774 2.22695 17.774H5.81738V4.31738H5.81742Z" fill="white"/>
    <path d="M5.81737 16.1171V10.9573H2.80745C2.74269 10.9573 2.69019 11.0098 2.69019 11.0745V15.9999C2.69019 16.0646 2.74269 16.1171 2.80745 16.1171H5.81737Z" fill="#FFA8CF"/>
    <path d="M5.81737 9.94632V8.30457H2.80745C2.74269 8.30457 2.69019 8.35707 2.69019 8.42183V9.82906C2.69019 9.89382 2.74269 9.94632 2.80745 9.94632H5.81737Z" fill="#9FB0FE"/>
    <path d="M5.81738 4.31738H2.22695C1.90312 4.31738 1.64062 4.57988 1.64062 4.90371V6.20039H5.81738V4.31738Z" fill="#FF7EB8"/>
    <path d="M15.4726 3.73098V18.3604C15.4726 18.684 15.2099 18.9467 14.8863 18.9467H5.11379C4.79012 18.9467 4.52747 18.684 4.52747 18.3604V3.73098C4.52747 3.40731 4.79016 3.14465 5.11379 3.14465H14.8863C15.2099 3.14465 15.4726 3.40731 15.4726 3.73098Z" fill="white"/>
    <path d="M4.52747 6.20435H15.4726V11.4815H4.52747V6.20435Z" fill="#FFA8CF"/>
    <path d="M15.4726 6.20435V10.3205C15.02 10.5089 14.5231 10.6125 14.0025 10.6125C11.8822 10.6125 10.1635 8.89333 10.1635 6.7731C10.1635 6.58001 10.1779 6.39001 10.2053 6.20435H15.4726Z" fill="#FF7EB8"/>
    <path d="M15.4726 5.02766V3.73098C15.4726 3.40715 15.2101 3.14465 14.8863 3.14465H5.11379C4.78997 3.14465 4.52747 3.40715 4.52747 3.73098V5.02766H15.4726Z" fill="#6583FE"/>
    <path d="M17.7731 4.12204H15.6679V3.73098C15.6679 3.3 15.3173 2.94934 14.8863 2.94934H5.11383C4.68281 2.94934 4.33219 3.3 4.33219 3.73098V4.12204H2.22699C1.79598 4.12204 1.44531 4.47266 1.44531 4.90368V17.1875C1.44531 17.6186 1.79598 17.9692 2.22699 17.9692H3.45164C3.55949 17.9692 3.64695 17.8818 3.64695 17.7739C3.64695 17.666 3.55949 17.5786 3.45164 17.5786H2.22699C2.01137 17.5786 1.83594 17.4032 1.83594 17.1875V6.39567H4.33211V18.3602C4.33211 18.7913 4.68277 19.1419 5.11375 19.1419H14.8862C15.3172 19.1419 15.6679 18.7913 15.6679 18.3602V17.9692H17.773C18.204 17.9692 18.5546 17.6186 18.5546 17.1875V4.90368C18.5547 4.47266 18.2041 4.12204 17.7731 4.12204ZM17.7731 4.51266C17.9887 4.51266 18.1641 4.68809 18.1641 4.90372V6.00504H15.6679V4.51266H17.7731ZM5.11383 3.33997H14.8863C15.1019 3.33997 15.2773 3.51536 15.2773 3.73098V4.83235H4.72277V3.73098C4.72277 3.51536 4.8982 3.33997 5.11383 3.33997ZM1.83594 6.00504V4.90372C1.83594 4.68809 2.01137 4.51266 2.22699 4.51266H4.33215V6.00504H1.83594ZM17.7731 17.5786H15.6679V7.27614C15.6679 7.16825 15.5805 7.08083 15.4726 7.08083C15.3648 7.08083 15.2773 7.16825 15.2773 7.27614V18.3602C15.2773 18.5759 15.1019 18.7513 14.8863 18.7513H5.11383C4.8982 18.7513 4.72281 18.5759 4.72281 18.3602V5.22297H15.2773V6.20036C15.2773 6.30825 15.3648 6.39567 15.4726 6.39567H18.1641V17.1875C18.1641 17.4032 17.9887 17.5786 17.7731 17.5786Z" fill="#2626BC"/>
    <path d="M3.12927 5.06067C3.02142 5.06067 2.93396 5.14809 2.93396 5.25598V5.26165C2.93396 5.36954 3.02142 5.45696 3.12927 5.45696C3.23712 5.45696 3.32458 5.36954 3.32458 5.26165V5.25598C3.32458 5.14809 3.23716 5.06067 3.12927 5.06067Z" fill="#2626BC"/>
    <path d="M3.88464 5.06067C3.77679 5.06067 3.68933 5.14809 3.68933 5.25598V5.26165C3.68933 5.36954 3.77679 5.45696 3.88464 5.45696C3.9925 5.45696 4.07996 5.36954 4.07996 5.26165V5.25598C4.07996 5.14809 3.9925 5.06067 3.88464 5.06067Z" fill="#2626BC"/>
    <path d="M6.01611 4.28427C6.12396 4.28427 6.21143 4.19685 6.21143 4.08895V4.08325C6.21143 3.97536 6.12396 3.88794 6.01611 3.88794C5.90826 3.88794 5.8208 3.97536 5.8208 4.08325V4.08895C5.8208 4.19685 5.90826 4.28427 6.01611 4.28427Z" fill="#2626BC"/>
    <path d="M6.77148 4.28427C6.87934 4.28427 6.9668 4.19685 6.9668 4.08895V4.08325C6.9668 3.97536 6.87934 3.88794 6.77148 3.88794C6.66363 3.88794 6.57617 3.97536 6.57617 4.08325V4.08895C6.57617 4.19685 6.66363 4.28427 6.77148 4.28427Z" fill="#2626BC"/>
    <path d="M7.52686 4.28427C7.63471 4.28427 7.72217 4.19685 7.72217 4.08895V4.08325C7.72217 3.97536 7.63471 3.88794 7.52686 3.88794C7.419 3.88794 7.33154 3.97536 7.33154 4.08325V4.08895C7.33154 4.19685 7.41896 4.28427 7.52686 4.28427Z" fill="#2626BC"/>
    <path d="M14.1406 8.25103C14.0643 8.17478 13.9406 8.17481 13.8643 8.25099C13.7881 8.32728 13.7881 8.45095 13.8643 8.5272L13.9547 8.61755L13.8643 8.7079C13.7881 8.78415 13.7881 8.90782 13.8643 8.98411C13.9025 9.02224 13.9524 9.0413 14.0024 9.0413C14.0524 9.0413 14.1024 9.02224 14.1406 8.98407L14.369 8.75563C14.4452 8.67938 14.4452 8.55571 14.369 8.47946L14.1406 8.25103Z" fill="#2626BC"/>
    <path d="M6.1358 8.25102C6.05955 8.1748 5.93584 8.17477 5.85959 8.25105L5.63119 8.47949C5.5549 8.55574 5.5549 8.67941 5.63119 8.75566L5.85959 8.9841C5.89775 9.02227 5.94771 9.04133 5.99771 9.04133C6.04768 9.04133 6.09768 9.02227 6.1358 8.98414C6.21209 8.90785 6.21209 8.78418 6.1358 8.70793L6.04549 8.61758L6.1358 8.52723C6.21209 8.45098 6.21209 8.3273 6.1358 8.25102Z" fill="#2626BC"/>
    <path d="M9.339 10.9857C9.45968 10.9857 9.55751 10.8879 9.55751 10.7672C9.55751 10.6465 9.45968 10.5487 9.339 10.5487C9.21832 10.5487 9.12048 10.6465 9.12048 10.7672C9.12048 10.8879 9.21832 10.9857 9.339 10.9857Z" fill="#4369FD"/>
    <path d="M10 10.9857C10.1207 10.9857 10.2185 10.8879 10.2185 10.7672C10.2185 10.6465 10.1207 10.5487 10 10.5487C9.87933 10.5487 9.78149 10.6465 9.78149 10.7672C9.78149 10.8879 9.87933 10.9857 10 10.9857Z" fill="#FF5BA8"/>
    <path d="M10.661 10.9857C10.7817 10.9857 10.8795 10.8879 10.8795 10.7672C10.8795 10.6465 10.7817 10.5487 10.661 10.5487C10.5403 10.5487 10.4425 10.6465 10.4425 10.7672C10.4425 10.8879 10.5403 10.9857 10.661 10.9857Z" fill="#FF5BA8"/>
    <path d="M7.78929 14.5275H5.33968C5.27491 14.5275 5.22241 14.475 5.22241 14.4103V12.6643C5.22241 12.5995 5.27491 12.547 5.33968 12.547H7.78929C7.85405 12.547 7.90655 12.5995 7.90655 12.6643V14.4103C7.90655 14.475 7.85405 14.5275 7.78929 14.5275Z" fill="#6583FE"/>
    <path d="M7.38226 14.5275H6.44409V13.3781C6.44409 13.3134 6.49659 13.2609 6.56136 13.2609H7.26499C7.32976 13.2609 7.38226 13.3134 7.38226 13.3781V14.5275Z" fill="#9FB0FE"/>
    <path d="M7.24356 15.526H5.88548C5.77735 15.526 5.6897 15.4383 5.6897 15.3302C5.6897 15.2221 5.77731 15.1344 5.88548 15.1344H7.24356C7.35169 15.1344 7.43935 15.2221 7.43935 15.3302C7.43935 15.4383 7.35169 15.526 7.24356 15.526Z" fill="#FF7EB8"/>
    <path d="M7.8087 16.9315H5.41819C5.31007 16.9315 5.22241 16.8438 5.22241 16.7357C5.22241 16.6276 5.31003 16.5399 5.41819 16.5399H7.8087C7.91683 16.5399 8.00448 16.6276 8.00448 16.7357C8.00448 16.8438 7.91683 16.9315 7.8087 16.9315Z" fill="#B7C5FF"/>
    <path d="M7.8087 17.6937H5.41819C5.31007 17.6937 5.22241 17.606 5.22241 17.4979C5.22241 17.3898 5.31003 17.3021 5.41819 17.3021H7.8087C7.91683 17.3021 8.00448 17.3898 8.00448 17.4979C8.00448 17.606 7.91683 17.6937 7.8087 17.6937Z" fill="#B7C5FF"/>
    <path d="M11.1759 14.5275H8.72627C8.66151 14.5275 8.60901 14.475 8.60901 14.4103V12.6643C8.60901 12.5995 8.66151 12.547 8.72627 12.547H11.1759C11.2406 12.547 11.2931 12.5995 11.2931 12.6643V14.4103C11.2931 14.475 11.2406 14.5275 11.1759 14.5275Z" fill="#6583FE"/>
    <path d="M10.7689 14.5275H9.83069V13.3781C9.83069 13.3134 9.88319 13.2609 9.94795 13.2609H10.6516C10.7164 13.2609 10.7689 13.3134 10.7689 13.3781V14.5275Z" fill="#9FB0FE"/>
    <path d="M10.6302 15.526H9.27208C9.16395 15.526 9.07629 15.4383 9.07629 15.3302C9.07629 15.2221 9.16391 15.1344 9.27208 15.1344H10.6302C10.7383 15.1344 10.8259 15.2221 10.8259 15.3302C10.8259 15.4383 10.7383 15.526 10.6302 15.526Z" fill="#FF7EB8"/>
    <path d="M11.1953 16.9315H8.80479C8.69666 16.9315 8.60901 16.8438 8.60901 16.7357C8.60901 16.6276 8.69663 16.5399 8.80479 16.5399H11.1953C11.3034 16.5399 11.3911 16.6276 11.3911 16.7357C11.3911 16.8438 11.3034 16.9315 11.1953 16.9315Z" fill="#B7C5FF"/>
    <path d="M11.1953 17.6937H8.80479C8.69666 17.6937 8.60901 17.606 8.60901 17.4979C8.60901 17.3898 8.69663 17.3021 8.80479 17.3021H11.1953C11.3034 17.3021 11.3911 17.3898 11.3911 17.4979C11.3911 17.606 11.3034 17.6937 11.1953 17.6937Z" fill="#B7C5FF"/>
    <path d="M14.5625 14.5275H12.1129C12.0481 14.5275 11.9956 14.475 11.9956 14.4103V12.6643C11.9956 12.5995 12.0481 12.547 12.1129 12.547H14.5625C14.6272 12.547 14.6797 12.5995 14.6797 12.6643V14.4103C14.6797 14.475 14.6272 14.5275 14.5625 14.5275Z" fill="#6583FE"/>
    <path d="M14.1554 14.5275H13.2173V13.3781C13.2173 13.3134 13.2698 13.2609 13.3346 13.2609H14.0382C14.1029 13.2609 14.1555 13.3134 14.1555 13.3781V14.5275H14.1554Z" fill="#9FB0FE"/>
    <path d="M14.0168 15.526H12.6587C12.5505 15.526 12.4629 15.4383 12.4629 15.3302C12.4629 15.2221 12.5505 15.1344 12.6587 15.1344H14.0168C14.1249 15.1344 14.2125 15.2221 14.2125 15.3302C14.2125 15.4383 14.1249 15.526 14.0168 15.526Z" fill="#FF7EB8"/>
    <path d="M14.5819 16.9315H12.1914C12.0833 16.9315 11.9956 16.8438 11.9956 16.7357C11.9956 16.6276 12.0832 16.5399 12.1914 16.5399H14.5819C14.69 16.5399 14.7777 16.6276 14.7777 16.7357C14.7777 16.8438 14.69 16.9315 14.5819 16.9315Z" fill="#B7C5FF"/>
    <path d="M14.5819 17.6937H12.1914C12.0833 17.6937 11.9956 17.606 11.9956 17.4979C11.9956 17.3898 12.0832 17.3021 12.1914 17.3021H14.5819C14.69 17.3021 14.7777 17.3898 14.7777 17.4979C14.7777 17.606 14.69 17.6937 14.5819 17.6937Z" fill="#B7C5FF"/>
    <path d="M16.519 3.57431C16.4672 3.57431 16.4175 3.55376 16.3809 3.51708L15.9505 3.08666C15.9139 3.05001 15.8933 3.00037 15.8933 2.94857C15.8933 2.89677 15.9139 2.84709 15.9505 2.81048L16.3809 2.38009C16.4572 2.3038 16.5808 2.3038 16.6571 2.38009L17.0875 2.81048C17.1241 2.84712 17.1447 2.89677 17.1447 2.94857C17.1447 3.00037 17.1241 3.05005 17.0875 3.08666L16.6571 3.51708C16.6205 3.55376 16.5708 3.57431 16.519 3.57431ZM16.3649 2.94861L16.5191 3.10279L16.6732 2.94861L16.5191 2.79447L16.3649 2.94861Z" fill="#FF7EB8"/>
    <path d="M3.34738 19.7389C3.29559 19.7389 3.2459 19.7183 3.20926 19.6816L2.77887 19.2512C2.74223 19.2146 2.72168 19.1649 2.72168 19.1131C2.72168 19.0613 2.74227 19.0116 2.77887 18.975L3.20926 18.5446C3.28555 18.4684 3.40918 18.4684 3.48547 18.5446L3.91586 18.975C3.9525 19.0117 3.97305 19.0613 3.97305 19.1131C3.97305 19.1649 3.95246 19.2146 3.91586 19.2512L3.48551 19.6816C3.44891 19.7183 3.39922 19.7389 3.34738 19.7389ZM3.19324 19.1131L3.34742 19.2673L3.5016 19.1131L3.34742 18.959L3.19324 19.1131Z" fill="#6583FE"/>
    <path d="M14.6798 2.47416C14.6298 2.47416 14.5798 2.4551 14.5417 2.41693L14.1113 1.98654C14.0746 1.9499 14.0541 1.90025 14.0541 1.84846C14.0541 1.79666 14.0747 1.74697 14.1113 1.71037L14.5417 1.27998C14.618 1.20369 14.7416 1.20373 14.8179 1.27998L15.2483 1.71037C15.3245 1.78662 15.3245 1.91029 15.2483 1.98654L14.8179 2.41693C14.7797 2.4551 14.7298 2.47416 14.6798 2.47416ZM14.5256 1.84846L14.6798 2.0026L14.8339 1.84846L14.6798 1.69432L14.5256 1.84846Z" fill="#6583FE"/>
    <path d="M17.2675 19.7772C17.1597 19.7772 17.0722 19.6897 17.0722 19.5819C17.0722 19.4522 16.9668 19.3468 16.8372 19.3468C16.7293 19.3468 16.6418 19.2594 16.6418 19.1515C16.6418 19.0436 16.7293 18.9561 16.8372 18.9561C16.9668 18.9561 17.0722 18.8507 17.0722 18.7211C17.0722 18.6132 17.1597 18.5258 17.2675 18.5258C17.3754 18.5258 17.4629 18.6132 17.4629 18.7211C17.4629 18.8507 17.5683 18.9561 17.6979 18.9561C17.8058 18.9561 17.8933 19.0436 17.8933 19.1515C17.8933 19.2594 17.8058 19.3468 17.6979 19.3468C17.5683 19.3468 17.4629 19.4522 17.4629 19.5819C17.4629 19.6897 17.3754 19.7772 17.2675 19.7772Z" fill="#97FFD2"/>
  </g>
  <defs>
    <linearGradient id="paint0_linear_100_384" x1="2.86743" y1="1.27718" x2="15.902" y2="19.583" gradientUnits="userSpaceOnUse">
      <stop offset="0.0485" stopColor="#FFDBED"/>
      <stop offset="0.9993" stopColor="#D2DEFF"/>
    </linearGradient>
    <clipPath id="clip0_100_384">
      <rect width="20" height="20" fill="white" transform="translate(0 0.5)"/>
    </clipPath>
  </defs>
</svg>
);

const Star: React.FC<React.SVGProps<SVGSVGElement>> = () => (
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
  <g clipPath="url(#clip0_134_526)">
    <path d="M16.3042 11.428C12.6553 10.4137 9.80461 7.55715 8.7933 3.90176L8.58375 3.14429L8.37419 3.90176C7.36289 7.55719 4.51214 10.4137 0.863281 11.428C4.51214 12.4423 7.36289 15.2988 8.37419 18.9542L8.58375 19.7117L8.7933 18.9542C9.80457 15.2988 12.6553 12.4423 16.3042 11.428Z" fill="#FEE45A"/>
    <path d="M16.3025 11.428C12.6536 10.4137 9.8029 7.55715 8.79159 3.90176L8.58204 3.14429L8.37249 3.90176C8.22159 4.44714 8.02974 4.97478 7.80042 5.48111C9.10811 8.36855 10.8532 10.565 13.9576 11.428C10.8532 12.2909 9.10811 14.4874 7.80042 17.3749C8.02974 17.8812 8.22159 18.4088 8.37249 18.9542L8.58204 19.7117L8.79159 18.9542C9.80286 15.2988 12.6536 12.4423 16.3025 11.428Z" fill="#FED402"/>
    <path d="M19.1387 3.5719C17.6923 3.16987 16.5623 2.03757 16.1614 0.588592L16.0784 0.28833L15.9953 0.588592C15.5945 2.03757 14.4645 3.16987 13.0181 3.5719C14.4644 3.97393 15.5944 5.10623 15.9953 6.55521L16.0784 6.85547L16.1614 6.55521C16.5623 5.10623 17.6923 3.97393 19.1387 3.5719Z" fill="#FEE45A"/>
    <path d="M19.1387 3.5719C17.6923 3.16987 16.5623 2.03757 16.1614 0.588592L16.0784 0.28833L15.9953 0.588592C15.8508 1.11099 15.6115 1.5922 15.2968 2.01291C15.2968 2.01291 16.2597 3.31482 17.1846 3.5719C16.2597 3.82898 15.2968 5.13089 15.2968 5.13089C15.6115 5.5516 15.8508 6.03281 15.9953 6.55521L16.0784 6.85547L16.1614 6.55521C16.5623 5.10623 17.6923 3.97393 19.1387 3.5719Z" fill="#FED402"/>
    <path d="M18.0106 17.6209C17.0973 17.367 16.3839 16.6521 16.1307 15.7372L16.0783 15.5476L16.0258 15.7372C15.7727 16.6521 15.0592 17.367 14.146 17.6209C15.0592 17.8747 15.7727 18.5897 16.0258 19.5045L16.0783 19.6941L16.1307 19.5045C16.3839 18.5897 17.0973 17.8747 18.0106 17.6209Z" fill="#99E6FC"/>
    <path d="M3.88822 5.18263C3.17295 4.98382 2.61417 4.42386 2.41591 3.70731L2.37483 3.55884L2.33376 3.70731C2.13554 4.42386 1.57672 4.98378 0.86145 5.18263C1.57672 5.38143 2.1355 5.94139 2.33376 6.65794L2.37483 6.80641L2.41591 6.65794C2.61417 5.94135 3.17299 5.38143 3.88822 5.18263Z" fill="#99E6FC"/>
    <path d="M16.5965 11.428C16.5965 11.2963 16.5087 11.1808 16.3819 11.1456C12.4171 10.0435 9.92806 6.90711 8.86537 3.06609C8.78783 2.78591 8.3779 2.78591 8.30037 3.06609C7.23759 6.90742 4.74897 10.0434 0.783904 11.1456C0.504161 11.2233 0.504161 11.6326 0.783904 11.7104C3.19287 12.38 5.28845 13.8932 6.68459 15.9714C6.8959 16.286 7.3825 15.9591 7.17119 15.6445C5.8685 13.7055 3.98916 12.2322 1.8142 11.4279C5.04658 10.2316 7.58526 7.53058 8.58285 4.2318C9.58043 7.53058 12.1192 10.2318 15.3517 11.428C12.1193 12.6241 9.58043 15.3252 8.58285 18.6241C8.41773 18.078 8.20989 17.5427 7.96345 17.0295C7.79946 16.6878 7.27097 16.9415 7.43503 17.2832C7.82119 18.0876 8.06353 18.9338 8.30037 19.7898C8.3779 20.07 8.78783 20.07 8.86537 19.7898C9.92814 15.9484 12.4168 12.8125 16.3819 11.7103C16.5087 11.6751 16.5965 11.5596 16.5965 11.428Z" fill="black"/>
    <path d="M19.2171 3.28948C18.6338 3.12737 18.0863 2.82828 17.6337 2.42457C17.513 2.31679 17.3277 2.32742 17.2199 2.44818C17.1121 2.56898 17.1227 2.75426 17.2435 2.86201C17.563 3.14699 17.9237 3.38656 18.31 3.57204C17.3136 4.05227 16.5143 4.88615 16.0783 5.90746C15.6422 4.88607 14.8428 4.05203 13.8462 3.57184C14.8427 3.09169 15.642 2.25781 16.0781 1.23658C16.1239 1.34421 16.1739 1.4502 16.2278 1.55419C16.3023 1.6979 16.4793 1.7539 16.6229 1.67941C16.7667 1.60488 16.8227 1.42796 16.7482 1.28426C16.5716 0.943862 16.4575 0.579741 16.3608 0.21015C16.2833 -0.070063 15.8733 -0.0700239 15.7958 0.210111C15.4115 1.66761 14.4307 2.87491 12.9394 3.28944C12.6597 3.36721 12.6597 3.77647 12.9394 3.85424C14.4308 4.26878 15.4121 5.47713 15.7958 6.93358C15.8733 7.21375 16.2833 7.21379 16.3608 6.93358C16.7448 5.47608 17.7259 4.26878 19.217 3.85428C19.4968 3.77647 19.4968 3.36725 19.2171 3.28948Z" fill="black"/>
    <path d="M18.0891 17.3384C17.1969 17.0904 16.5725 16.3529 16.3608 15.4694C16.2833 15.1892 15.8733 15.1892 15.7958 15.4694C15.5849 16.3535 14.9597 17.0905 14.0675 17.3384C13.7877 17.4162 13.7877 17.8255 14.0675 17.9032C14.9596 18.1512 15.5841 18.8887 15.7958 19.7722C15.8733 20.0524 16.2833 20.0524 16.3608 19.7722C16.5717 18.8882 17.1969 18.1512 18.0891 17.9032C18.3688 17.8255 18.3688 17.4162 18.0891 17.3384ZM16.0783 18.8435C15.8112 18.3323 15.4003 17.9063 14.9009 17.6208C15.4003 17.3354 15.8112 16.9094 16.0783 16.3982C16.3454 16.9094 16.7563 17.3353 17.2558 17.6208C16.7563 17.9063 16.3454 18.3323 16.0783 18.8435Z" fill="black"/>
    <path d="M0.782928 5.46501C1.45649 5.65225 1.93356 6.21693 2.09231 6.88452C2.16977 7.16477 2.57985 7.16477 2.6573 6.88452C2.81746 6.21556 3.29175 5.65264 3.96668 5.46501C4.24643 5.38724 4.24643 4.97798 3.96668 4.90021C3.29308 4.71297 2.81605 4.14828 2.6573 3.4807C2.57985 3.20044 2.16977 3.20044 2.09231 3.4807C1.93215 4.14961 1.45782 4.71258 0.782928 4.90021C0.503184 4.97798 0.503184 5.3872 0.782928 5.46501ZM2.37483 4.35612C2.57105 4.69128 2.84611 4.97548 3.17376 5.18257C2.84607 5.38966 2.57105 5.67386 2.37483 6.00902C2.17856 5.67386 1.90351 5.38966 1.57589 5.18257C1.90351 4.97552 2.17852 4.69128 2.37483 4.35612Z" fill="black"/>
  </g>
  <defs>
    <clipPath id="clip0_134_526">
      <rect width="20" height="20" fill="white"/>
    </clipPath>
  </defs>
</svg>
);

type Option = {
  id: string;
  title: string;
  subtitle?: string;
  price: string;
  Icon?: React.ElementType;


};

type CostItem = {
  label: string;
  value: string | number;
  price: number;
};

const OPTIONS: Option[] = [
  { id: "business", title: "Business Website", subtitle: "for services & info", price: "₹20,000/-", Icon: Briefcase },
  { id: "ecommerce", title: "E‑commerce", subtitle: "sell products online", price: "₹80,000/-", Icon: Cart },
  { id: "cms", title: "CMS Blogs", subtitle: "post blogs easily", price: "₹20,000/-", Icon: Pen },
  { id: "landing", title: "Landing Page", subtitle: "single‑page built to convert", price: "₹20,000/-", Icon: Bulb },
  { id: "custom", title: "Custom", subtitle: "made from scratch", price: "—", Icon: Puzzle },
];

const OPTIONS2: Option[] = [
  {
  id: "wordpress",
  title: "WordPress",
  subtitle: "Easy to manage content | Huge plugin ecosystem | Great for blogs & SEO",
  price: "₹20,000/-",
  Icon: WordPressIcon,
},
 {
  id: "framer",
  title: "Framer / Webflow",
  subtitle: "Easy to manage content | Huge plugin ecosystem | Great for blogs & SEO",
  price: "₹20,000/-",
  Icon: FramerIcon,
}
];

const OPTIONS3: Option[] = [
  { id: "10pages", title: "Under 10 Pages", price: "₹20,000/-" },
  { id: "10-25pages", title: "10 -25 Pages", price: "₹80,000/-" },
  { id: "25-40pages", title: "25 - 40 Pages", price: "₹1,20,000/-" },
];

const OPTIONS_PRODUCTS: Option[] = [
  { id: "10products", title: "Up to 10 Products", price: "₹50,000/-" },
  { id: "25products", title: "Up to 25 Products", price: "₹80,000/-" },
  { id: "100products", title: "Up to 100 Products", price: "₹1,20,000/-" },
];



const OPTIONS4 = [
  { id: "paracatassistant", title: "Paracat Assistant",  price: "₹20,000/-" },
  { id: "yourassistant", title: "Your Assistant",  price: "₹80,000/-" },
  { id: "illproivde", title: "I'll Proivde",  price: "₹20,000/-" },
];

const OPTIONS5: Option[] = [
  {
  id: "flexible",
  title: "Flexible",
  subtitle: "5-6 Weeks ",
  price: "₹20,000/-",

},
 {
  id: "Standard",
  title: "Standard",
  subtitle: "4 Weeks ",
  price: "₹20,000/-",

},
 {
  id: "fasttrack",
  title: "Fast Track",
  subtitle: "2-3Weeks",
  price: "₹20,000/-",

}
];

const OPTIONS6: Option[] = [
  {
  id: "templatebased",
  title: "Template Based",
  price: "₹20,000/-",

},
 {
  id: "Custom",
  title: "Custom UI/UX",
  price: "₹20,000/-",

},
 {
  id: "Mobile First Design",
  title: "Mobile First Design",
  price: "₹20,000/-",

}
];






const Calculator = () => {

 const [selectedStep1, setSelectedStep1] = useState("");
  const [selectedStep2, setSelectedStep2] = useState("");
  const [selectedStep3, setSelectedStep3] = useState("");
  const [selectedStep4, setSelectedStep4] = useState("");
  const [selectedStep5, setSelectedStep5] = useState("");
  const [selectedStep6, setSelectedStep6] = useState("");


const [showEmailInput, setShowEmailInput] = useState(false);
const [disableEmailBtn, setDisableEmailBtn] = useState(false);
const [email, setEmail] = useState("");


const [showPopupForm, setShowPopupForm] = useState(false);
const [toastMessage, setToastMessage] = useState("");


  const parsePrice = (priceString: string): number => {
    const num = priceString.replace(/[₹,/-]/g, "").trim();
    return Number(num) || 0;
  };

const getOptionById = (options: Option[], id: string) =>
    options.find((option) => option.id === id);


  const showStep3 =
  selectedStep1 !== "custom" && selectedStep1 !== "landing";

const getStep3Options = () => {
  if (selectedStep1 === "ecommerce") return OPTIONS_PRODUCTS;
  if (selectedStep1 === "cms" || selectedStep1 === "business")
    return OPTIONS3;
  return [];
};


const costItems: CostItem[] = [
  {
    label: "Website Type",
    value: getOptionById(OPTIONS, selectedStep1)?.title || "Na Na",
    price: parsePrice(getOptionById(OPTIONS, selectedStep1)?.price || "0"),
  },
  {
    label: "Tech Stack",
    value: showStep3
      ? getOptionById(OPTIONS2, selectedStep2)?.title || "Na Na"
      : "Na Na",
    price: showStep3
      ? parsePrice(getOptionById(OPTIONS2, selectedStep2)?.price || "0")
      : 0,
  },
  {
    label: "Pages / Products",
    value:
      selectedStep1 === "ecommerce"
        ? getOptionById(OPTIONS_PRODUCTS, selectedStep3)?.title || "Na Na"
        : getOptionById(OPTIONS3, selectedStep3)?.title || "Na Na",
    price:
      selectedStep1 === "ecommerce"
        ? parsePrice(getOptionById(OPTIONS_PRODUCTS, selectedStep3)?.price || "0")
        : parsePrice(getOptionById(OPTIONS3, selectedStep3)?.price || "0"),
  },
  {
    label: "Content Creation",
    value: getOptionById(OPTIONS4, selectedStep4)?.title || "Na Na",
    price: parsePrice(getOptionById(OPTIONS4, selectedStep4)?.price || "0"),
  },
  {
    label: "Timeline",
    value: getOptionById(OPTIONS5, selectedStep5)?.title || "Na Na",
    price: parsePrice(getOptionById(OPTIONS5, selectedStep5)?.price || "0"),
  },
  {
    label: "Design",
    value: getOptionById(OPTIONS6, selectedStep6)?.title || "Na Na",
    price: parsePrice(getOptionById(OPTIONS6, selectedStep6)?.price || "0"),
  },
];


  const totals = costItems.reduce((acc, item) => acc + item.price, 0);

  const [currentStep, setCurrentStep] = useState(1); // ✅ uncomment this
  const selected = currentStep > 1; // ✅ Add this before your JSX
const handleNext = () => {
  // Step 1 logic
  if (currentStep === 1) {
    if (selectedStep1 === "custom") {
      setCurrentStep(4); // Skip 2 and 3
    } else if (!showStep3) {
      setCurrentStep(2); // Show step 2 but skip step 3 later
    } else {
      setCurrentStep(2); // Go to step 2 normally
    }
    return;
  }

  // Step 2 logic
  if (currentStep === 2) {
    if (!showStep3) {
      setCurrentStep(4); // Skip step 3 if not needed
    } else {
      setCurrentStep(3); // Go to step 3
    }
    return;
  }

  // Step 3 and others
  if (currentStep < TOTAL_STEPS) {
    setCurrentStep(currentStep + 1);
  }
};

  const handlePrevious = () => {
  if (currentStep === 4) {
    if (!showStep3) {
      if (selectedStep1 === "custom") {
        setCurrentStep(1); // Go all the way back if custom
      } else {
        setCurrentStep(2); // Go back to step 2 if step 3 was skipped
      }
    } else {
      setCurrentStep(3); // Go back normally
    }
    return;
  }

  if (currentStep > 1) {
    setCurrentStep(currentStep - 1);
  }
};

const [formData, setFormData] = useState<{
  name: string;
  phone: string;
  email: string;
}>({
  name: "",
  phone: "",
  email: "",
});

  const [errors, setErrors] = useState<{ name: string; phone: string; email: string }>({ name: "", phone: "", email: "" });

  const validate = () => {
    const { name, phone, email } = formData;
    const newErrors: { name: string; phone: string; email: string } = { name: "", phone: "", email: "" };


    // Name validation
    if (!name.trim()) {
      newErrors.name = "Please enter your name.";
    } else if (!/^[a-zA-Z ]{2,}$/.test(name)) {
      newErrors.name = "Name must be at least 2 letters with no numbers.";
    }

    // Phone validation
    if (!phone.trim()) {
      newErrors.phone = "Please enter your phone number.";
    } else if (!/^[0-9]{10}$/.test(phone)) {
      newErrors.phone = "Phone number must be exactly 10 digits.";
    }

    // Email validation
    if (!email.trim()) {
      newErrors.email = "Please enter your email.";
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      newErrors.email = "Please enter a valid email address.";
    }

    setErrors(newErrors);
    return !newErrors.name && !newErrors.phone && !newErrors.email;
  };


const handleSubmit = async () => {
  if (!validate()) return;

  const { name, phone, email } = formData;

  try {
    const res = await fetch("/api/submit-form", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        name,
        phone,
        email,
        quote: costItems,   // from quotation
        total: totals       // from quotation
      }),
    });
    const data = await res.json();

    if (res.ok) {
      console.log("✅ Final Form Submitted:", formData);
      setToastMessage("✅ Thank you! We'll connect with you soon.");
      setTimeout(() => setToastMessage(""), 4000);
      setShowPopupForm(false);
    } else {
      alert(`❌ Error: ${data.message}`);
    }
  } catch (err) {
    console.error("❌ Submission error:", err);
    alert('Something went wrong while submitting.');
  }
}  
const handleEmailSubmit = async () => {
  if (!email) {
    alert("Please enter a valid email address.");
    return;
  }

  try {
    const res = await fetch("/api/send-quotation", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        email,
        quote: costItems,
        total: totals,
      }),
    });



    if (res.ok) {
      alert("✅ Quotation sent successfully!");
      setShowEmailInput(false);
    } else {
      alert("❌ Failed to send email.");
    }
  } catch (err) {
    console.error("❌ Error sending email:", err);
    alert("Something went wrong while sending the email.");
  }
};








// const [selected, setSelected] = useState<string | null>(null);

  /** Progress helpers */
  const TOTAL_STEPS = 7;
  // const [currentStep, setCurrentStep] = useState(1);
const progressPercent = Math.round(((currentStep - 1) / (TOTAL_STEPS - 1)) * 100);


  const [animatedPercent, setAnimatedPercent] = useState(0);
const requestRef = useRef<number | null>(null);

  useEffect(() => {
    const start = animatedPercent;
    const end = progressPercent;
    const duration = 500;
    const startTime = performance.now();

    const step = (timestamp: number) => {
      const progress = Math.min((timestamp - startTime) / duration, 1);
      const value = Math.floor(start + (end - start) * progress);
      setAnimatedPercent(value);

      if (progress < 1) {
        requestRef.current = requestAnimationFrame(step);
      }
    };

    if (requestRef.current !== null) {
      cancelAnimationFrame(requestRef.current);
    }
    requestRef.current = requestAnimationFrame(step);

    return () => {
      if (requestRef.current !== null) {
        cancelAnimationFrame(requestRef.current);
      }
    };
  }, [progressPercent]);


  return (

    <div  className="">
<div
  className="w-full h-[500px] md:h-[700px] relative bg-no-repeat bg-center bg-cover px-4 py-10 md:py-0"
>
  <div className="max-w-7xl mx-auto w-full flex flex-col-reverse md:flex-row items-center justify-between gap-8 relative z-10 lg:top-0 top-10">
    
    {/* Text Section */}
    <div className="text-center md:text-left px-5 py-10 space-y-4 w-full md:w-1/2 z-20 md:static absolute top-1/2 left-1/2 md:top-auto md:left-auto transform md:transform-none -translate-x-1/2 -translate-y-1/2 md:translate-x-0 md:translate-y-0">
      <h1 className="text-[35px] sm:text-[28px] md:text-5xl  text-black leading-tight">
        Estimate Your Project
        
      </h1>

      <div className="flex md:flex-row flex-col items-center justify-center md:justify-start gap-3 sm:gap-5">
       <span
  className="relative flex items-center justify-center w-[93px] h-[43px] text-[26px] sm:text-[32px] md:text-[35px]  text-black text-center capitalize font-Poppins px-2 py-1 rounded-[5px]"
  style={{ background: "#F9B31B", letterSpacing: "0.2px" }}
>
  Cost
  <Image
    src="/images/Highlight.png"
    alt="highlight"
    width={25}
    height={25}
    className="absolute -top-5 -right-5"
  />
</span>

        <span className="text-[24px] sm:text-[28px] md:text-5xl  text-black">
          Instantly
        </span>
      </div>

      <button
        className="mt-6 inline-flex items-center font-poppins justify-center gap-[10px] px-[30px] py-[10px] rounded-[5px] text-white text-[16px] sm:text-[18px]"
        style={{
          background: "#262626",
          boxShadow: "2px 2px 0px 0px #F9B31B",
        }}
      >
        Calculate Now
      </button>
    </div>
     

    {/* Image Section */}
    <div className="relative w-full md:w-[600px] h-[400px] sm:h-[400px] md:h-[553px] z-0 lg:top-20">
      <Image
        src="/images/hero2.png"
        alt="Desk Illustration"
        fill
        className="object-contain"
      />
    </div>
  </div>
</div>

    <section className="w-full px-4 py-10 flex flex-col items-center">
      {/* ---------- Top headings ---------- */}
      <h2 className="text-center font-poppins lg:text-[32px] text-[23px]  font-bold leading-normal tracking-[-0.8px] capitalize text-black">Plan Your Website, Step By Step</h2>
      
      <div className="flex items-center gap-2 mt-1 text-sm text-gray-600">
        
        <span className="text-center font-poppins text-[20px] font-[400]  leading-normal text-[#797474]">
  Calculate your digital dream
</span>

        <svg xmlns="http://www.w3.org/2000/svg" width="21" height="20" viewBox="0 0 21 20" fill="none">
  <path d="M10.5124 0.259161C7.13539 0.254738 4.38363 3.00278 4.38367 6.37983C4.38371 8.6248 5.59257 10.5872 7.39471 11.6522C7.71473 11.8414 7.90842 12.188 7.90842 12.5597V14.0505C7.96767 14.0257 8.03264 14.012 8.10086 14.012H12.9077C12.9759 14.012 13.0409 14.0258 13.1002 14.0505V12.5596C13.1002 12.1835 13.3011 11.8379 13.6245 11.6459C15.4208 10.5794 16.6249 8.62034 16.6249 6.37971C16.6249 3.00215 13.889 0.263583 10.5124 0.259161Z" fill="#FFE07D"/>
  <path d="M9.52607 12.5597C9.52607 12.188 9.33238 11.8414 9.01239 11.6523C7.21026 10.5872 6.00135 8.62484 6.00135 6.37987C6.00131 3.2792 8.32112 0.709196 11.3147 0.312583C11.0521 0.277868 10.7844 0.259513 10.5124 0.259161C7.13539 0.254738 4.38363 3.00278 4.38367 6.37983C4.38371 8.6248 5.59257 10.5872 7.39471 11.6522C7.71473 11.8414 7.90842 12.188 7.90842 12.5597V14.0505C7.96763 14.0257 8.03264 14.012 8.10086 14.012H9.52607V12.5597Z" fill="#FFC250"/>
  <path d="M14.7741 5.18139C14.4565 3.99769 13.6404 3.00799 12.5352 2.46607C12.3897 2.39468 12.3295 2.21884 12.4009 2.07329C12.4722 1.92774 12.6482 1.86762 12.7937 1.93897C14.0511 2.55549 14.9796 3.68189 15.3411 5.02922C15.3832 5.18577 15.2903 5.34678 15.1337 5.38881C14.9772 5.43081 14.8162 5.33805 14.7741 5.18139Z" fill="#FFEAC8"/>
  <path d="M9.31909 18.3099V18.525C9.31909 19.1769 9.85249 19.7103 10.5044 19.7103C11.1563 19.7103 11.6897 19.1769 11.6897 18.525V18.3099H9.31909Z" fill="#8479C2"/>
  <path d="M10.3801 18.525V18.3099H9.31897V18.525C9.31897 19.1769 9.85237 19.7103 10.5043 19.7103C10.6947 19.7103 10.8749 19.6645 11.0348 19.5838C10.6475 19.3883 10.3801 18.9865 10.3801 18.525Z" fill="#6E60B8"/>
  <path d="M2.96 6.51662H1.95027C1.78816 6.51662 1.65674 6.3852 1.65674 6.22309C1.65674 6.06099 1.78816 5.92957 1.95027 5.92957H2.96C3.1221 5.92957 3.25353 6.06099 3.25353 6.22309C3.25353 6.3852 3.1221 6.51662 2.96 6.51662Z" fill="#FFC250"/>
  <path d="M3.24815 4.6539L2.30409 4.2956C2.15251 4.23807 2.07628 4.06857 2.13381 3.91703C2.19134 3.76549 2.3608 3.68929 2.51238 3.74675L3.45644 4.10505C3.60802 4.16258 3.68426 4.33208 3.62673 4.48362C3.56923 4.63508 3.39985 4.71139 3.24815 4.6539Z" fill="#FFC250"/>
  <path d="M2.1338 8.52911C2.07627 8.37753 2.15255 8.20803 2.30409 8.15054L3.24815 7.79224C3.39965 7.73475 3.56919 7.81095 3.62672 7.96252C3.68425 8.1141 3.60797 8.2836 3.45644 8.3411L2.51237 8.69939C2.36076 8.75689 2.19133 8.68065 2.1338 8.52911Z" fill="#FFC250"/>
  <path d="M19.0584 6.51662H18.0487C17.8865 6.51662 17.7551 6.3852 17.7551 6.22309C17.7551 6.06099 17.8865 5.92957 18.0487 5.92957H19.0584C19.2205 5.92957 19.352 6.06099 19.352 6.22309C19.352 6.3852 19.2205 6.51662 19.0584 6.51662Z" fill="#FFC250"/>
  <path d="M17.382 4.48362C17.3244 4.33204 17.4007 4.16254 17.5523 4.10505L18.4963 3.74675C18.6478 3.6893 18.8174 3.76546 18.8749 3.91704C18.9324 4.06861 18.8561 4.23812 18.7046 4.29561L17.7605 4.65391C17.609 4.7114 17.4395 4.63516 17.382 4.48362Z" fill="#FFC250"/>
  <path d="M18.4963 8.69939L17.5523 8.34109C17.4007 8.28356 17.3244 8.11406 17.382 7.96252C17.4395 7.81098 17.609 7.73474 17.7605 7.79223L18.7046 8.15053C18.8562 8.20806 18.9324 8.37757 18.8749 8.5291C18.8174 8.68056 18.648 8.75688 18.4963 8.69939Z" fill="#FFC250"/>
  <path d="M12.5166 16.8675H8.49199C8.21115 16.8675 7.98267 17.096 7.98267 17.3768V17.8104C7.98267 18.0912 8.21115 18.3197 8.49199 18.3197H12.5166C12.7974 18.3197 13.0259 18.0912 13.0259 17.8104V17.3768C13.0259 17.096 12.7975 16.8675 12.5166 16.8675Z" fill="#EFECEF"/>
  <path d="M12.5166 17.5936H8.49199C8.26199 17.5936 8.06732 17.4403 8.00431 17.2306C7.99038 17.277 7.98267 17.326 7.98267 17.3768V17.8104C7.98267 18.0913 8.21115 18.3197 8.49199 18.3197H12.5166C12.7974 18.3197 13.0259 18.0913 13.0259 17.8104V17.3768C13.0259 17.326 13.0182 17.277 13.0043 17.2306C12.9412 17.4403 12.7466 17.5936 12.5166 17.5936Z" fill="#E2DFE2"/>
  <path d="M12.9078 15.4349H8.10088C7.82003 15.4349 7.59155 15.6634 7.59155 15.9442V16.3778C7.59155 16.6586 7.82003 16.8871 8.10088 16.8871H12.9078C13.1886 16.8871 13.4171 16.6586 13.4171 16.3778V15.9442C13.4171 15.6634 13.1886 15.4349 12.9078 15.4349Z" fill="#EFECEF"/>
  <path d="M12.9078 16.161H8.10088C7.87091 16.161 7.67625 16.0077 7.6132 15.7979C7.59926 15.8443 7.59155 15.8933 7.59155 15.9442V16.3777C7.59155 16.6586 7.82003 16.8871 8.10088 16.8871H12.9078C13.1886 16.8871 13.4171 16.6586 13.4171 16.3777V15.9442C13.4171 15.8933 13.4094 15.8443 13.3954 15.7979C13.3324 16.0077 13.1378 16.161 12.9078 16.161Z" fill="#E2DFE2"/>
  <path d="M12.9078 14.0022H8.10088C7.82003 14.0022 7.59155 14.2307 7.59155 14.5115V14.9451C7.59155 15.2259 7.82003 15.4544 8.10088 15.4544H12.9078C13.1886 15.4544 13.4171 15.2259 13.4171 14.9451V14.5115C13.4171 14.2307 13.1886 14.0022 12.9078 14.0022Z" fill="#EFECEF"/>
  <path d="M12.9078 14.7283H8.10088C7.87091 14.7283 7.67625 14.575 7.6132 14.3653C7.59926 14.4117 7.59155 14.4607 7.59155 14.5116V14.9451C7.59155 15.226 7.82003 15.4544 8.10088 15.4544H12.9078C13.1886 15.4544 13.4171 15.226 13.4171 14.9451V14.5116C13.4171 14.4607 13.4094 14.4117 13.3954 14.3653C13.3324 14.575 13.1378 14.7283 12.9078 14.7283Z" fill="#E2DFE2"/>
  <path d="M12.7846 1.93508C12.639 1.86369 12.4632 1.92385 12.3918 2.0694C12.3205 2.21495 12.3806 2.39079 12.5262 2.46218C13.6314 3.00414 14.4475 3.99384 14.7651 5.1775C14.8072 5.3342 14.9683 5.42696 15.1247 5.38492C15.2813 5.34293 15.3742 5.18192 15.3322 5.02533C14.9706 3.67797 14.042 2.5516 12.7846 1.93508Z" fill="black"/>
  <path d="M3.24461 6.21925C3.24461 6.05714 3.11323 5.92572 2.95109 5.92572H1.94135C1.77921 5.92572 1.64783 6.05714 1.64783 6.21925C1.64783 6.38135 1.77921 6.51277 1.94135 6.51277H2.95109C3.11323 6.51277 3.24461 6.38135 3.24461 6.21925Z" fill="black"/>
  <path d="M3.44753 4.10114L2.50347 3.74285C2.35201 3.68539 2.18243 3.76155 2.1249 3.91313C2.06736 4.06471 2.1436 4.23421 2.29518 4.2917L3.23924 4.65C3.39102 4.70753 3.56036 4.63114 3.61781 4.47972C3.67531 4.32818 3.59911 4.15868 3.44753 4.10114Z" fill="black"/>
  <path d="M3.23935 7.78832L2.29529 8.14662C2.14371 8.20415 2.06751 8.37365 2.125 8.52519C2.18246 8.67669 2.35184 8.753 2.50357 8.69547L3.44764 8.33717C3.59921 8.27964 3.67541 8.11014 3.61792 7.9586C3.56043 7.80702 3.39089 7.73086 3.23935 7.78832Z" fill="black"/>
  <path d="M19.0495 5.92572H18.0397C17.8776 5.92572 17.7462 6.05714 17.7462 6.21925C17.7462 6.38135 17.8776 6.51277 18.0397 6.51277H19.0495C19.2117 6.51277 19.343 6.38135 19.343 6.21925C19.343 6.05714 19.2117 5.92572 19.0495 5.92572Z" fill="black"/>
  <path d="M17.7516 4.65007L18.6957 4.29177C18.8473 4.23424 18.9235 4.06473 18.866 3.9132C18.8085 3.76158 18.6389 3.68546 18.4874 3.74291L17.5433 4.10121C17.3918 4.15874 17.3156 4.32824 17.373 4.47978C17.4305 4.63124 17.5999 4.70756 17.7516 4.65007Z" fill="black"/>
  <path d="M18.6957 8.14662L17.7516 7.78832C17.6001 7.73086 17.4306 7.80702 17.3731 7.9586C17.3155 8.11018 17.3918 8.27968 17.5433 8.33717L18.4874 8.69547C18.6392 8.753 18.8085 8.67661 18.866 8.52519C18.9235 8.37365 18.8473 8.20415 18.6957 8.14662Z" fill="black"/>
  <path d="M11.1479 0.585266C13.7988 0.880476 15.904 2.93207 16.2675 5.57433C16.2895 5.73436 16.4369 5.84719 16.5983 5.82512C16.7589 5.80304 16.8711 5.65491 16.849 5.49433C16.6565 4.09425 15.9908 2.77705 14.9747 1.7854C13.9568 0.792027 12.6209 0.158634 11.2129 0.00181237C11.0517 -0.0160341 10.9066 0.0999287 10.8887 0.261056C10.8707 0.422182 10.9868 0.567302 11.1479 0.585266Z" fill="black"/>
  <path d="M16.6178 6.61167C16.457 6.59809 16.3142 6.71757 16.3004 6.87909C16.1408 8.7444 15.0813 10.4306 13.4659 11.3897C13.0539 11.6343 12.7979 12.0811 12.7979 12.5558V13.7146H11.5557V11.3812C11.5557 11.2464 11.6011 11.1134 11.6835 11.0067L12.1036 10.4629C12.2649 10.254 12.3538 9.99353 12.3538 9.72955V7.60719C12.5159 7.60711 12.6472 7.47573 12.6472 7.31367C12.6472 7.1516 12.5159 7.02022 12.3538 7.02014V6.98813C12.3538 6.82602 12.2224 6.6946 12.0603 6.6946C11.8981 6.6946 11.7667 6.82602 11.7667 6.98813V7.0201H9.22441V6.98813C9.22441 6.82602 9.09302 6.6946 8.93088 6.6946C8.76874 6.6946 8.63735 6.82602 8.63735 6.98813V7.0201C8.47529 7.02018 8.34394 7.15156 8.34394 7.31363C8.34394 7.47569 8.47529 7.60708 8.63735 7.60715V9.72951C8.63735 9.99349 8.72623 10.2539 8.88759 10.4629L9.30765 11.0067C9.39004 11.1134 9.43547 11.2464 9.43547 11.3812V13.7146H8.19327V12.5558C8.19327 12.08 7.94119 11.6354 7.53537 11.3956C5.76701 10.3505 4.66851 8.42707 4.66848 6.37587C4.66844 3.40518 6.89318 0.91587 9.8434 0.585515C10.0045 0.567473 10.1204 0.422236 10.1024 0.261148C10.0844 0.10006 9.93964 -0.0159807 9.77804 0.00210056C8.2225 0.176299 6.78488 0.917083 5.73003 2.08802C4.66691 3.26816 4.08138 4.79094 4.08142 6.37587C4.0815 8.71516 5.33819 10.779 7.23664 11.901C7.46458 12.0357 7.60617 12.2866 7.60617 12.5557V13.8822C7.41969 14.0275 7.29903 14.2535 7.29903 14.5076V14.9411C7.29903 15.1304 7.36587 15.3042 7.4769 15.4407C7.36587 15.5772 7.29903 15.751 7.29903 15.9402V16.3738C7.29903 16.6865 7.48133 16.9566 7.74484 17.0857C7.71004 17.1749 7.6902 17.2715 7.6902 17.3729V17.8064C7.6902 18.2437 8.04595 18.5995 8.48327 18.5995H9.01882C9.05976 19.3786 9.70646 19.9999 10.4956 19.9999C11.2847 19.9999 11.9314 19.3786 11.9723 18.5995H12.5078C12.9452 18.5995 13.3009 18.2438 13.3009 17.8064V17.3729C13.3009 17.2715 13.2811 17.1749 13.2463 17.0857C13.5097 16.9566 13.6921 16.6865 13.6921 16.3738V15.9402C13.6921 15.751 13.6252 15.5772 13.5142 15.4407C13.6252 15.3042 13.6921 15.1304 13.6921 14.9411V14.5076C13.6921 14.2534 13.5714 14.0274 13.3849 13.8822V12.5557C13.3849 12.2872 13.5308 12.0338 13.7657 11.8944C15.5435 10.8388 16.7097 8.98262 16.8853 6.92903C16.899 6.76759 16.7793 6.62548 16.6178 6.61167ZM9.35211 10.1041C9.26973 9.99744 9.22433 9.86446 9.22433 9.72963V7.60727H11.7667V9.72963C11.7667 9.86446 11.7213 9.99744 11.6389 10.1041L11.2188 10.6479C11.0574 10.8569 10.9685 11.1173 10.9685 11.3813V13.7147H10.0224V11.3813C10.0224 11.1173 9.93353 10.8569 9.77213 10.6479L9.35211 10.1041ZM10.4955 19.4129C10.0302 19.4129 9.64701 19.0548 9.60717 18.5996H11.3839C11.344 19.0547 10.9608 19.4129 10.4955 19.4129ZM12.7138 17.8066C12.7138 17.9201 12.6214 18.0126 12.5078 18.0126C12.0182 18.0126 8.84462 18.0126 8.48323 18.0126C8.36966 18.0126 8.27722 17.9202 8.27722 17.8066V17.373C8.27722 17.2594 8.36962 17.167 8.48323 17.167H12.5078C12.6214 17.167 12.7138 17.2594 12.7138 17.373V17.8066ZM13.105 16.3739C13.105 16.4875 13.0126 16.5799 12.8989 16.5799C12.6744 16.5799 8.23373 16.5799 8.0921 16.5799C7.97848 16.5799 7.88604 16.4875 7.88604 16.3739V15.9404C7.88604 15.8268 7.97844 15.7343 8.0921 15.7343H12.8989C13.0126 15.7343 13.105 15.8267 13.105 15.9404V16.3739ZM13.105 14.9413C13.105 15.0548 13.0126 15.1473 12.8989 15.1473H8.0921C7.97848 15.1473 7.88604 15.0549 7.88604 14.9413V14.5077C7.88604 14.3908 7.98412 14.3017 8.0921 14.3017H12.8989C13.0117 14.3017 13.105 14.3949 13.105 14.5077V14.9413Z" fill="black"/>
</svg>
      </div>

      {/* ---------- Progress row ---------- */}
      {/* <div className="mt-6 w-full max-w-6xl max-h-7xl"> */}
       

        {/* Progress bar */}
         <div className="w-full max-w-6xl max-h-7xl lg:mt-1 mt-5">
      {/* Header */}
      <div className="flex items-center justify-between text-sm text-gray-600 mb-2">
        <span className="text-[#797474] text-center font-[Poppins] text-[20px] italic font-light leading-none tracking-[0.2px] capitalize">
          Progress
        </span>
        <span className="text-[#797474] text-center font-[Poppins] text-[20px] not-italic font-light leading-none tracking-[0.2px] capitalize">
          {animatedPercent}%
        </span>
      </div>

      {/* Progress bar */}
      <div className="flex gap-3">
         {[...Array(TOTAL_STEPS - 1)].map((_, idx) => (  // Only render 6 segments
          <div
            key={idx}
          className="flex-1 h-[10px] rounded-[20px] border border-[#1E1E1E] bg-transparent overflow-hidden"
          >
            <div
              className={`h-full bg-[#F9B31B] transition-all duration-500`}
              style={{
                width: idx < currentStep - 1 ? "100%" : "0%",
              }}
            />
          </div>
        ))}
      </div>
    </div>
      {/* </div> */}

      {/* ---------- section one  ---------- */}
      {currentStep === 1 && (
        <div
  className="
    flex flex-col gap-6
    mt-8 mb-5
    w-full   /* mobile: take full width */
    max-w-[908px]  /* desktop cap */
     p-5 md:p-[30px_30px]
    bg-white rounded-[8px] border border-[#1E1E1E]
    shadow-[6px_5px_0px_0px_#262626]
  "
>
        {/* Header row inside white card */}
        {/* Header row */}
<div className="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-2">
  {/* left block */}
  <div>
    <div className="flex items-center gap-2">
      <h3 className="text-[24px] font-poppins font-[700] text-black">
            {currentStep === 1 ? "Bana Kya Rahe Ho?" : "Bana Kese Rahe Ho?"  }
          </h3>
 <Form1 className="w-4 h-4" />
    </div>

    <p className="text-[#797474] font-poppins text-[16px] font-[400]">
      What do you want us to build?
    </p>
  </div>

  {/* Pick‑one label + chevron */}
  <div className="flex items-center gap-1 sm:ml-10">
    <span className="font-poppins text-[14px] font-[400] capitalize text-[#1E1E1E]">
      Pick One
    </span>
    <svg
      className="w-[15px] h-[10px] mt-[2px]"
      viewBox="0 0 6 10"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M3.3 1C3.3 0.834315 3.16569 0.7 3 0.7C2.83431 0.7 2.7 0.834315 2.7 1H3.3ZM2.78787 9.21213C2.90503 9.32929 3.09497 9.32929 3.21213 9.21213L5.12132 7.30294C5.23848 7.18579 5.23848 6.99584 5.12132 6.87868C5.00416 6.76152 4.81421 6.76152 4.69706 6.87868L3 8.57574L1.30294 6.87868C1.18579 6.76152 0.995837 6.76152 0.87868 6.87868C0.761522 6.99584 0.761522 7.18579 0.87868 7.30294L2.78787 9.21213ZM3 1H2.7L2.7 9H3H3.3L3.3 1H3Z"
        fill="#1E1E1E"
      />
    </svg>
  </div>
</div>


        {/* Pick one label */}

        {/* Options grid */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3 ">
          {OPTIONS.map(({ id, title, subtitle, price, Icon }) => {
            const active = selectedStep1 === id;
            return (
              <button
                key={id}
                type="button"
                onClick={() => setSelectedStep1(id)}

                className={`flex items-center justify-between gap-4 rounded-[8px] border transition-colors  px-3 py-3 text-left w-full lg:w-[280px] h-[72px] ${
                  active
      ? "bg-[#F9B31B] border-[#1E1E1E] text-white shadow-[2px_2px_0px_0px_#1E1E1E] "
      : "bg-white border-[#1E1E1E] text-[#1E1E1E] hover:bg-[#FFE19F]"
  }`}
>
                <div className="flex items-center gap-1">
                   <span className=" relative inline-flex items-center justify-center w-10 h-10 -top-1">
                  <span
                    className={`w-6 h-6 rounded-full right-0 top-1 -mr-8   ${
                      active ? "bg-white text-[#F9B31B]" : "bg-[#F9B31B] text-[#F9B31B]"
                    }`}
                  >
                  </span>
                    <div className=" relative -top-1 mr-1">
                    {Icon && <Icon className="w-4 h-4" />}
                     </div>
                  </span>
                  <div>
                   <h4 className="text-[#111827] font-poppins text-[14px] font-[600] ">
  {title}
</h4>

                   <p className={` font-poppins text-[12px] font-[500]  lowercase  ${
                      active ? "text-[#111827]" : " text-[#111827]"
                    }`}>
  {subtitle}
</p>

                  </div>
                </div>
                <span
        className={`text-[14px] font-[500] leading-normal font-poppins ${
          active ? 'text-white' : 'text-[#111827]'
        }`}
      >
        {price}
      </span>
              </button>
            );
          })}
        </div>

        {/* ---------- Navigation buttons ---------- */}
      </div>
      )}


     {/* ---------- section one  ---------- */}
      {currentStep === 2 && (
      <div
  className="
    flex flex-col gap-6
    mt-8 mb-5
    w-full   /* mobile: take full width */
    max-w-[908px]  /* desktop cap */
     p-5 md:p-[40px_40px]
    bg-white rounded-[8px] border border-[#1E1E1E]
    shadow-[6px_5px_0px_0px_#262626]
  "
>
        {/* Header row inside white card */}
        {/* Header row */}
<div className="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-2">
  {/* left block */}
  <div>
    <div className="flex items-center gap-2">
      <h3 className="text-[24px] font-poppins font-[700] text-black">
        Tech Stack Toh Batayo
      </h3>
 <Form2 className="w-4 h-4" />
    </div>

    <p className="text-[#797474] font-poppins text-[16px] font-[400]">
      Choose your building platform from our tech bazaar!
    </p>
  </div>

  {/* Pick‑one label + chevron */}
  <div className="flex items-center gap-1 sm:ml-10">
    <span className="font-poppins text-[14px] font-[400] capitalize text-[#1E1E1E]">
      Pick One
    </span>
    <svg
      className="w-[15px] h-[10px] mt-[2px]"
      viewBox="0 0 6 10"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M3.3 1C3.3 0.834315 3.16569 0.7 3 0.7C2.83431 0.7 2.7 0.834315 2.7 1H3.3ZM2.78787 9.21213C2.90503 9.32929 3.09497 9.32929 3.21213 9.21213L5.12132 7.30294C5.23848 7.18579 5.23848 6.99584 5.12132 6.87868C5.00416 6.76152 4.81421 6.76152 4.69706 6.87868L3 8.57574L1.30294 6.87868C1.18579 6.76152 0.995837 6.76152 0.87868 6.87868C0.761522 6.99584 0.761522 7.18579 0.87868 7.30294L2.78787 9.21213ZM3 1H2.7L2.7 9H3H3.3L3.3 1H3Z"
        fill="#1E1E1E"
      />
    </svg>
  </div>
</div>


        {/* Pick one label */}

        {/* Options grid */}
          <div className="grid grid-cols-1 md:grid-cols-3 lg:gap-10 gap-5">
          {OPTIONS2.map(({ id, title, subtitle, price,Icon}) => {
            const active = selectedStep2 === id;
            return (
              <button
  key={id}
  type="button"
  onClick={() => setSelectedStep2(id)}
  className={`flex flex-col justify-between gap-2 rounded-[8px] border transition-colors px-4 py-4 text-left w-full lg:w-[280px] h-[180px] relative ${
    active
      ? "bg-[#F9B31B] border-[#1E1E1E] text-white shadow-[2px_2px_0px_0px_#1E1E1E]"
      : "bg-white border-[#1E1E1E] text-[#1E1E1E] hover:bg-[#FFE19F]"
  }`}
>
  {/* Top Section with Logo + Price */}
  <div className="flex flex-col items-center justify-center w-full relative">
  {/* Icon */}
  <div className="w-10 h-10 mb-2">
    {Icon ? <Icon className="w-full h-full" /> : null}
  </div>

  {/* Title */}
  <h4 className="text-[14px] font-bold font-poppins text-center text-black">{title}</h4>

  {/* Price tag */} 
  <span
    className={`absolute top-0 right-0 border rotate-[18deg] text-black border-black px-2 py-0.5 text-xs font-semibold rounded-md `}
   style={{
    borderRadius: "5px",
    border: "2px solid #000",
  }}>
    {price}
  </span>
</div>


  {/* Subtitle or Description List */}
  <ul className="text-sm font-poppins text-[#444] list-disc ml-5 space-y-1">
    {subtitle
      ? subtitle.split("|").map((item, i) => (
          <li key={i}>{item.trim()}</li>
        ))
      : null}
  </ul>
</button>

            );
          })}
        </div>

        {/* ---------- Navigation buttons ---------- */}
      </div>
      )}

     {currentStep === 3 && showStep3 && (
  <div
    className="
      flex flex-col gap-6
      mt-8 mb-5
      w-full max-w-[908px]
      p-5 md:p-[40px_40px]
      bg-white rounded-[8px] border border-[#1E1E1E]
      shadow-[6px_5px_0px_0px_#262626]
    "
  >
    {/* Header */}
    <div className="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-2">
      <div>
        <div className="flex items-center gap-2">
          <h3 className="text-[24px] font-poppins font-[700] text-black">
            Ginti Toh Batao Boss!
          </h3>
          <Form3 className="w-4 h-4" />
        </div>
        <p className="text-[#797474] font-poppins text-[16px] font-[400]">
          Choose your building platform from our tech bazaar!
        </p>
      </div>

      {/* Pick‑one label */}
      <div className="flex items-center gap-1 sm:ml-10">
        <span className="font-poppins text-[14px] capitalize font-[400] text-[#1E1E1E]">
          Pick One
        </span>
        <svg
          className="w-[15px] h-[10px] mt-[2px]"
          viewBox="0 0 6 10"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M3.3 1C3.3 0.834315 3.16569 0.7 3 0.7C2.83431 0.7 2.7 0.834315 2.7 1H3.3ZM2.78787 9.21213C2.90503 9.32929 3.09497 9.32929 3.21213 9.21213L5.12132 7.30294C5.23848 7.18579 5.23848 6.99584 5.12132 6.87868C5.00416 6.76152 4.81421 6.76152 4.69706 6.87868L3 8.57574L1.30294 6.87868C1.18579 6.76152 0.995837 6.76152 0.87868 6.87868C0.761522 6.99584 0.761522 7.18579 0.87868 7.30294L2.78787 9.21213ZM3 1H2.7L2.7 9H3H3.3L3.3 1H3Z"
            fill="#1E1E1E"
          />
        </svg>
      </div>
    </div>

    {/* Options Grid */}
    <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
      {getStep3Options().map(({ id, title, price }) => {
        const active = selectedStep3 === id;
        return (
          <button
            key={id}
            type="button"
            onClick={() => setSelectedStep3(id)}
            className={`flex items-center justify-between gap-4 rounded-[8px] border transition-colors px-4 py-3 w-full h-[42px]
              ${
                active
                  ? "bg-[#F9B31B] border-[#1E1E1E] text-white shadow-[2px_2px_0px_0px_#1E1E1E]"
                  : "bg-white border-[#1E1E1E] text-[#1E1E1E] hover:bg-[#FFE19F]"
              }`}
          >
            <div className="flex items-center gap-3">
              <span
                className={`w-[12px] h-[12px] rounded-full border-[2px] ${
                  active ? "bg-black border-black" : "border-[#F9B31B]"
                }`}
              ></span>
              <div className="flex flex-col text-left">
                <h4 className="text-[14px] font-[600] leading-tight text-black">
                  {title}
                </h4>
              </div>
            </div>
            <span className="text-[14px] font-[600] text-black">{price}</span>
          </button>
        );
      })}
    </div>
  </div>
)}

      {currentStep === 4 && (
        <div
  className="
    flex flex-col gap-6
    mt-8 mb-5
    w-full   /* mobile: take full width */
    max-w-[908px]  /* desktop cap */
    p-5 md:p-[40px_40px]
    bg-white rounded-[8px] border border-[#1E1E1E]
    shadow-[6px_5px_0px_0px_#262626]
  "
>
        {/* Header row inside white card */}
        {/* Header row */}
<div className="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-2">
  {/* left block */}
  <div>
    <div className="flex items-center gap-2">
      <h3 className="text-[24px] font-poppins font-[700] text-black">
           Images kon dega Boss!
          </h3>
       <Form1 className="w-4 h-4" />
    </div>

    <p className="text-[#797474] font-poppins text-[16px] font-[600]">
      {/* What do you want us to build? */}
      Hum denge tho paisa lagenge
    </p>
  </div>

  {/* Pick‑one label + chevron */}
  <div className="flex items-center gap-1 sm:ml-10">
    <span className="font-poppins text-[14px] capitalize text-[#1E1E1E]">
      Pick One
    </span>
    <svg
      className="w-[15px] h-[10px] mt-[2px]"
      viewBox="0 0 6 10"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M3.3 1C3.3 0.834315 3.16569 0.7 3 0.7C2.83431 0.7 2.7 0.834315 2.7 1H3.3ZM2.78787 9.21213C2.90503 9.32929 3.09497 9.32929 3.21213 9.21213L5.12132 7.30294C5.23848 7.18579 5.23848 6.99584 5.12132 6.87868C5.00416 6.76152 4.81421 6.76152 4.69706 6.87868L3 8.57574L1.30294 6.87868C1.18579 6.76152 0.995837 6.76152 0.87868 6.87868C0.761522 6.99584 0.761522 7.18579 0.87868 7.30294L2.78787 9.21213ZM3 1H2.7L2.7 9H3H3.3L3.3 1H3Z"
        fill="#1E1E1E"
      />
    </svg>
  </div>
</div>


        {/* Pick one label */}

        {/* Options grid */}
          <div className="grid grid-cols-1 md:grid-cols-1 gap-3 ">
          {OPTIONS4.map(({ id, title, price}) => {
            const active = selectedStep4 === id;
            return (
              <button
                key={id}
                type="button"
                onClick={() => setSelectedStep4(id)}
                className={`flex items-center justify-between gap-4 rounded-[8px] border transition-colors  px-3 py-3 text-left w-full lg:w-[850px] h-[52px] ${
                  active
      ? "bg-[#F9B31B] border-[#1E1E1E] text-white shadow-[2px_2px_0px_0px_#1E1E1E] "
      : "bg-white border-[#1E1E1E] text-[#1E1E1E] hover:bg-[#FFE19F]"
  }`}
>
                <div className="flex items-center gap-4">
                   <span
            className={`w-[12px] h-[12px] rounded-full ml-4 border-[2px] ${
              active ? "bg-black border-black" : "border-[#F9B31B]"
            }`}
          ></span>
                   
                  <div>
                   <h4 className="text-[#111827] font-poppins text-[14px] font-[600] leading-normal">
  {title}
</h4>

                  </div>
                </div>
                <span
        className={`text-[14px] font-[600] leading-normal font-poppins ${
          active ? 'text-white' : 'text-[#111827]'
        }`}
      >
        {price}
      </span>
              </button>
            );
          })}
        </div>

        {/* ---------- Navigation buttons ---------- */}
      </div>
      
      )}
      
       {currentStep === 5 && (
        <div
  className="
    flex flex-col gap-6
    mt-8 mb-5
    w-full   /* mobile: take full width */
    max-w-[908px]  /* desktop cap */
    p-5 md:p-[40px_40px]
    bg-white rounded-[8px] border border-[#1E1E1E]
    shadow-[6px_5px_0px_0px_#262626]
  "
>
        {/* Header row inside white card */}
        {/* Header row */}
<div className="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-2">
  {/* left block */}
  <div>
    <div className="flex items-center gap-2">
      <h3 className="text-[24px] font-poppins font-[700] text-black">
           Kab tak chahiye
          </h3>
       <Form2 className="w-4 h-4" />
    </div>

    <p className="text-[#797474] font-poppins text-[16px] font-[400]">
      Choose your building platform from our tech bazaar!
    </p>
  </div>

  {/* Pick‑one label + chevron */}
  <div className="flex items-center gap-1 sm:ml-10">
    <span className="font-poppins text-[14px] font-[400] capitalize text-[#1E1E1E]">
      Pick One
    </span>
    <svg
      className="w-[15px] h-[10px] mt-[2px]"
      viewBox="0 0 6 10"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M3.3 1C3.3 0.834315 3.16569 0.7 3 0.7C2.83431 0.7 2.7 0.834315 2.7 1H3.3ZM2.78787 9.21213C2.90503 9.32929 3.09497 9.32929 3.21213 9.21213L5.12132 7.30294C5.23848 7.18579 5.23848 6.99584 5.12132 6.87868C5.00416 6.76152 4.81421 6.76152 4.69706 6.87868L3 8.57574L1.30294 6.87868C1.18579 6.76152 0.995837 6.76152 0.87868 6.87868C0.761522 6.99584 0.761522 7.18579 0.87868 7.30294L2.78787 9.21213ZM3 1H2.7L2.7 9H3H3.3L3.3 1H3Z"
        fill="#1E1E1E"
      />
    </svg>
  </div>
</div>


        {/* Pick one label */}

        {/* Options grid */}
<div className="grid grid-cols-1 md:grid-cols-3 gap-3">
  {OPTIONS5.map(({ id, title,subtitle, price }) => {
    const active = selectedStep5 === id;
    return (
      <button
    
        key={id}
        type="button"
        onClick={() => setSelectedStep5(id)}
        className={`flex items-center justify-between gap-4 rounded-[8px] border transition-colors px-4 py-3 w-full h-[52px]
          ${active
            ? "bg-[#F9B31B] border-[#1E1E1E] text-white shadow-[2px_2px_0px_0px_#1E1E1E]"
            : "bg-white border-[#1E1E1E] text-[#1E1E1E] hover:bg-[#FFE19F]"
          }`}
      >
        {/* Left Block: Circle + Text */}
        <div className="flex items-center gap-3">
          {/* Radio circle */}
          <span
            className={`w-[12px] h-[12px] rounded-full border-[2px] ${
              active ? "bg-black border-black" : "border-[#F9B31B]"
            }`}
          ></span>

          {/* Title & Subtitle */}
          <div className="flex flex-col text-left ">
            <h4 className={`text-[14px] font-[600] leading-tight ${active ? "text-black" : "text-black"}`}>
              {title}
            </h4>
             <p className={` font-poppins text-[12px] font-[500]  lowercase  ${
                      active ? "text-[#111827]" : " text-[#111827]"
                    }`}>
  {subtitle}
</p>
          </div>
        </div>

        {/* Price */}
        <span
          className={`text-[14px] font-[600] text-black `}
        >
          {price}
        </span>
      </button>
    );
  })}
</div>


        {/* ---------- Navigation buttons ---------- */}
      </div>
      )}

      {currentStep === 6 && (
        <div
  className="
    flex flex-col gap-6
    mt-8 mb-5
    w-full   /* mobile: take full width */
    max-w-[908px]  /* desktop cap */
     p-5 md:p-[40px_40px]
    bg-white rounded-[8px] border border-[#1E1E1E]
    shadow-[6px_5px_0px_0px_#262626]
  "
>
        {/* Header row inside white card */}
        {/* Header row */}
<div className="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-2">
  {/* left block */}
  <div>
    <div className="flex items-center gap-2">
      <h3 className="text-[24px] font-poppins font-[700] text-black">
           Design kon dega
          </h3>
       <Form1 className="w-4 h-4" />
    </div>

    <p className="text-[#797474] font-poppins text-[16px] font-[400]">
      Choose your building platform from our tech bazaar!
    </p>
  </div>

  {/* Pick‑one label + chevron */}
  <div className="flex items-center gap-1 sm:ml-10">
    <span className="font-poppins text-[14px] font-[400] capitalize text-[#1E1E1E]">
      Pick One
    </span>
    <svg
      className="w-[15px] h-[10px] mt-[2px]"
      viewBox="0 0 6 10"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M3.3 1C3.3 0.834315 3.16569 0.7 3 0.7C2.83431 0.7 2.7 0.834315 2.7 1H3.3ZM2.78787 9.21213C2.90503 9.32929 3.09497 9.32929 3.21213 9.21213L5.12132 7.30294C5.23848 7.18579 5.23848 6.99584 5.12132 6.87868C5.00416 6.76152 4.81421 6.76152 4.69706 6.87868L3 8.57574L1.30294 6.87868C1.18579 6.76152 0.995837 6.76152 0.87868 6.87868C0.761522 6.99584 0.761522 7.18579 0.87868 7.30294L2.78787 9.21213ZM3 1H2.7L2.7 9H3H3.3L3.3 1H3Z"
        fill="#1E1E1E"
      />
    </svg>
  </div>
</div>


        {/* Pick one label */}

        {/* Options grid */}
<div className="grid grid-cols-1 md:grid-cols-3 gap-3">
  {OPTIONS6.map(({ id, title, price }) => {
    const active = selectedStep6 === id;
    return (
      <button
    
        key={id}
        type="button"
        onClick={() => setSelectedStep6(id)}
        className={`flex items-center justify-between gap-4 rounded-[8px] border transition-colors px-4 py-3 w-full h-[52px]
          ${active
            ? "bg-[#F9B31B] border-[#1E1E1E] text-white shadow-[2px_2px_0px_0px_#1E1E1E]"
            : "bg-white border-[#1E1E1E] text-[#1E1E1E] hover:bg-[#FFE19F]"
          }`}
      >
        {/* Left Block: Circle + Text */}
        <div className="flex items-center gap-3">
          {/* Radio circle */}
          <span
            className={`w-[12px] h-[12px] rounded-full border-[2px] ${
              active ? "bg-black border-black" : "border-[#F9B31B]"
            }`}
          ></span>

          {/* Title & Subtitle */}
          <div className="flex flex-col text-left ">
            <h4 className={`text-[14px]  font-[600] leading-tight ${active ? "text-black" : "text-black"}`}>
              {title}
            </h4>
            
          </div>
        </div>

        {/* Price */}
        <span
          className={`text-[14px] font-[600] text-black `}
        >
          {price}
        </span>
      </button>
    );
  })}
</div>


        {/* ---------- Navigation buttons ---------- */}
      </div>
      )}

      

       {currentStep === 7 && (
        //  <div className="max-w-6xl mx-auto p-5 bg-white rounded-md shadow-lg border mt-10">
        <div
  className="
    flex flex-col gap-6
    mt-8 mb-5
    w-full   /* mobile: take full width */
    max-w-[908px] 
     p-4 md:p-[40px_40px]
    bg-white rounded-[8px] border border-[#1E1E1E]
    shadow-[6px_5px_0px_0px_#262626]
  "
>
      <h2 className="text-2xl md:text-[24px] font-[700] text-center ">
        Your Project Estimate
      </h2>

      {/* Total Amount Banner */}
      <div
  className="text-center py-4 rounded-md shadow-inner border"
  style={{
    borderRadius: "8px",
    border: "1px solid #1E1E1E",
    background: "#F9B31B",
    boxShadow: "3px 3px 0px 0px #262626",
  }}
>
  <h3 className="text-white text-center font-poppins text-[24px] font-[700] capitalize tracking-tightest">
  ₹{totals.toLocaleString()}
</h3>


        <div className="flex items-center justify-center gap-2 text-center   text-[#1E1E1E] font-[Poppins] text-[14px] font-[300] leading-normal">
  <span>Here is What It ill Take to Build Your Vision</span>
   <Form1 className="w-4 h-4" />
</div>

      </div>

      <div className="flex flex-col md:flex-row gap-8">
        {/* LEFT SIDE */}
       <div className="md:w-1/2 space-y-10 ">

          <div>
           <h4 className=" text-black font-[Poppins] text-[24px] font-[700] leading-normal tracking-[-0.8px] capitalize mb-3 flex items-center gap-2">
  Whats Always Included 
  <Star className="w-4 h-4" />
</h4>

            <ul className="space-y-3">
              {includedItems.map((item, i) => (
                <li key={i} className="flex items-center gap-2 text-green-600">
                 <svg xmlns="http://www.w3.org/2000/svg" width="8" height="8" viewBox="0 0 8 8" fill="none">
  <circle cx="4" cy="4" r="4" fill="#76CA21"/>
</svg>
                  <span className="text-[#1E1E1E] text-center font-[Poppins] text-[14px] font-[300]  leading-normal">
  {item}
</span>

                </li>
              ))}
            </ul>
          </div>


      {/* testomonials */}
          <div className="flex items-center  lg:mt-30 md:mt-20 gap-5 self-stretch rounded-[8px] border border-[#FFC250] bg-white shadow-[2px_2px_0px_0px_#F9B31B] p-5 md:p-[20px_15px]">
  <div>
   <p className="text-center text-[#1E1E1E] font-[Poppins] text-[14px] font-[400] not-italic leading-none">

      “Had an amazing journey working with Bombay Blokes, never felt like
      I was working with an outside agency!”
    </p>
    
  <div className="flex items-center gap-4 justify-center mt-4 ">
  {/* Profile Image */}
  <img
     src="/images/Ellipse.png" // replace with actual path
    alt="Profile"
    className="w-8 h-8 rounded-full object-cover "
  />

  {/* Name and Designation */}
  <div className="flex flex-col">
    <span className="text-[#1E1E1E] text-center font-[Poppins] text-[12px] font-[400]  leading-normal">
  Kaushik Shah
</span>

   <span className="text-[#1E1E1E] text-center font-[Poppins] text-[12px] font-[400]  leading-normal">
  India Grooming Club
</span>

  </div>
</div>
  </div>
</div>

        </div>

        {/* RIGHT SIDE */}
    {/* <div className="max-w-[400px] mx-auto p-5 border-2 rounded-xl shadow-md font-[Comic Neue]"> */}
       <div
  className="
    flex flex-col 
    w-full   
    h-[480px]/* mobile: take full width */
    max-w-[424px]
    max-h-[455px]  /* desktop cap */
     p-5 md:p-[20px_20px]
    bg-white rounded-[8px] border border-[#1E1E1E]
    shadow-[6px_5px_0px_0px_#262626]
  "
>
      <h2 className=" flex text-[24px] font-[700] mb-3 gap-2  text-black font-[Poppins] leading-normal tracking-[-0.8px] capitalize">
        Cost Summary <span ><img
     src="/images/buldings.svg" // replace with actual path
    alt="Profile"
    className="w-5 h-5 mt-2 "
  /></span>
      </h2>

      {costItems.map((item, index) => (
        <div key={index} className="flex justify-between items-start mb-2">
          <p>
           <span className="text-[#1E1E1E] text-center font-[Poppins] text-[14px] font-[700] leading-normal not-italic">
  {item.label}:
</span>
{" "}
            <span className="text-[#1E1E1E] font-[Poppins] text-[14px] font-[300] not-italic  leading-normal">
  {item.value}
</span>

          </p>
          <p className="whitespace-nowrap text-[#1E1E1E] text-center font-[Poppins] text-[14px] font-[500] not-italic  leading-normal">
  ₹{item.price.toLocaleString()}
</p>

        </div>
      ))}

      <hr className="my-2 border-black" />

      <div className="flex justify-between items-center mb-5">
        <p className="text-[#1E1E1E] text-center font-[Poppins] text-[14px] font-[700] not-italic  leading-normal">
  Estimated Cost:
</p>

       <p className="text-[#1E1E1E] text-center font-[Poppins] text-[14px] font-[700] not-italic leading-normal">
  ₹{totals.toLocaleString()}
</p>

      </div>

      <button  onClick={() => setShowPopupForm(true)} className="w-full mb-3 py-[8px] px-[23px] lg:mt-4 rounded-[5px] bg-[#262626] shadow-[2px_2px_0px_0px_#F9B31B] text-white text-[16px] font-[400] italic flex justify-center items-center gap-[10px] self-stretch transition-all ">
  Schedule Free Call
</button>


     {/* Email Input + Button Logic */}
{!showEmailInput ? (
  <button
    onClick={() => {
      setShowEmailInput(true);
      setDisableEmailBtn(true);
    }}
    className="w-full py-[8px] px-[23px] rounded-[5px] border border-[#1E1E1E] bg-white text-black text-[16px] font-[400] italic shadow-[2px_2px_0px_0px_#1E1E1E] flex justify-center items-center gap-[10px] self-stretch transition disabled:opacity-50"
    disabled={disableEmailBtn}
  >
    Email Me The Quote
  </button>
) : (
<div className="grid grid-cols-10 gap-3 items-center w-full">
  <input
    type="email"
    placeholder="Enter your email"
    className="col-span-7 p-2 border border-[#1E1E1E] rounded w-full"
    value={email}
    onChange={(e) => setEmail(e.target.value)}
  />
  <button
    onClick={handleEmailSubmit}
    className="col-span-3 py-[8px] px-[12px] rounded-[5px] bg-[#262626] text-white font-[400] italic shadow-[2px_2px_0px_0px_#F9B31B] transition w-full"
  >
    Send  
  </button>
</div>

)}


    </div>
      </div>
    </div>
      )}

          {showPopupForm && (
  <div className="fixed inset-0  bg-opacity-60 flex items-center justify-center z-50">
    <div className="relative bg-white rounded-[8px] border border-[#1E1E1E] shadow-[6px_5px_0px_0px_#262626] p-6 w-full max-w-[600px] max-h-[90vh] overflow-y-auto">
      
      {/* Close Button */}
      <button
        onClick={() => setShowPopupForm(false)}
        className="absolute top-2 right-2 text-black text-lg font-bold"
      >
        ×
      </button>

      {/* Form Content from Section 7 Goes Here */}
      <h3 className="text-[24px] font-poppins font-[700] text-black mb-2">
        Apni information Dedo bhai!!
      </h3>
      <p className="text-[#797474] font-poppins text-[16px] font-[400] mb-4">
        Choose your building platform from our tech bazaar!
      </p>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
        {/* Name */}
        <div className="flex flex-col gap-1">
          <label htmlFor="name" className="text-sm font-medium text-black">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={(e) =>
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value,
    }))
  }
            className={`px-3 py-2 border rounded-[8px] focus:outline-none focus:ring-2 ${
              errors.name ? "border-red-500 focus:ring-red-300" : "border-[#1E1E1E] focus:ring-[#F9B31B]"
            }`}
            placeholder="Enter your name"
          />
          {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
        </div>

        {/* Phone */}
        <div className="flex flex-col gap-1">
          <label htmlFor="phone" className="text-sm font-medium text-black">Phone</label>
          <input
            type="tel"
            id="phone"
            name="phone"
            value={formData.phone}
           
            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
            className={`px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${
              errors.phone ? "border-red-500 focus:ring-red-300" : "border-[#1E1E1E] focus:ring-[#F9B31B]"
            }`}
            placeholder="Enter your phone"
          />
          {errors.phone && <p className="text-red-500 text-sm mt-1">{errors.phone}</p>}
        </div>

        {/* Email */}
        <div className="flex flex-col gap-1">
          <label htmlFor="email" className="text-sm font-medium text-black">Email</label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
           
            onChange={(e) => setFormData({ ...formData, email: e.target.value })}
            className={`px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${
              errors.email ? "border-red-500 focus:ring-red-300" : "border-[#1E1E1E] focus:ring-[#F9B31B]"
            }`}
            placeholder="Enter your email"
          />
          {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email}</p>}
        </div>
      </div>

      {/* Submit Button */}
      <button
         onClick={handleSubmit}
        className="mt-6 w-full py-[8px] px-[23px] rounded-[5px] bg-[#262626] text-white text-[16px] font-[400] italic flex justify-center items-center gap-[10px] transition-all"
      >
        Submit
      </button>
    </div>
  </div>
)}

{toastMessage && (
  <div className="fixed bottom-6 left-1/2 transform -translate-x-1/2 bg-green-600 text-white px-4 py-2 rounded shadow-md z-50">
    {toastMessage}
  </div>
)}

      {/* buttons */}

{currentStep !== 7 && (
  <div className="flex justify-between mt-4 xl:gap-160 lg:gap-160 md:gap-130 gap-20">
    {/* Previous Button */}
    <button
      type="button"
      onClick={handlePrevious}
      className={`flex items-center justify-center gap-2 px-[30px] py-[10px] rounded-[5px] italic 
                  border shadow-[2px_2px_0px_0px_#262626] transition-colors text-[16px] font-[400]
                  ${
                    currentStep > 1
                      ? "bg-[#F9B31B] border-[#262626] text-[#262626]"
                      : "bg-gray-200 border-gray-200 text-gray-400 cursor-not-allowed shadow-none"
                  }`}
      disabled={!selected}
    >
      Previous
    </button>

    {/* Next Step Button */}
    <button
      type="button"
      onClick={() => {
        if (
          (currentStep === 1 && !selectedStep1) ||
          (currentStep === 2 && !selectedStep2) ||
          (currentStep === 3 && !selectedStep3) ||
          (currentStep === 4 && !selectedStep4) ||
          (currentStep === 5 && !selectedStep5) ||
          (currentStep === 6 && !selectedStep6)
        ) {
          alert("Please make a selection before proceeding.");
          return;
        }

        handleNext();
      }}
      className={`flex items-center justify-center gap-2 px-[30px] py-[10px] rounded-[5px] font-medium
                  border-2 transition-colors
                  ${
                    (currentStep === 1 && !selectedStep1) ||
                    (currentStep === 2 && !selectedStep2) ||
                    (currentStep === 3 && !selectedStep3) ||
                    (currentStep === 4 && !selectedStep4) ||
                    (currentStep === 5 && !selectedStep5) ||
                    (currentStep === 6 && !selectedStep6)
                      ? "bg-gray-200 border-gray-200 text-gray-500 cursor-not-allowed shadow-none"
                      : "bg-black border-black text-white hover:bg-[#1a1a1a] shadow-[2px_2px_0px_0px_#F9B31B]"
                  }`}
      disabled={
        (currentStep === 1 && !selectedStep1) ||
        (currentStep === 2 && !selectedStep2) ||
        (currentStep === 3 && !selectedStep3) ||
        (currentStep === 4 && !selectedStep4) ||
        (currentStep === 5 && !selectedStep5) ||
        (currentStep === 6 && !selectedStep6)
      }
    >
      Next Step
    </button>
  </div>
)}





     

    </section>

     
</div>





  )
}

export default Calculator